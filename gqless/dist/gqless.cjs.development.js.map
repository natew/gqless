{"version":3,"file":"gqless.cjs.development.js","sources":["../src/Cache/Value.ts","../src/Cache/utils/deepReference.ts","../src/Cache/merge/createValue.ts","../src/Cache/merge/extensionsForKey.ts","../src/Selection/Selection.ts","../src/Variable/Variable.ts","../src/utils/mixins/Disposable.ts","../src/utils/uniquify.ts","../src/utils/deepJSONEqual.ts","../src/utils/PathArray.ts","../src/utils/camelCase.ts","../src/utils/arrayEqual.ts","../src/QueryBuilder/buildVariable.ts","../src/QueryBuilder/buildArguments.ts","../src/QueryBuilder/buildSelection.ts","../src/QueryBuilder/SelectionTree/getAlias.ts","../src/QueryBuilder/SelectionTree/resolveAliases.ts","../src/QueryBuilder/SelectionTree/SelectionTree.ts","../src/QueryBuilder/SelectionTree/toTree.ts","../src/QueryBuilder/buildFragments.ts","../src/QueryBuilder/buildQuery.ts","../src/QueryBuilder/Formatter.ts","../src/Selection/FieldSelection.ts","../src/Selection/Fragment.ts","../src/Cache/merge/selectionsForKey.ts","../src/Cache/NodeEntry.ts","../src/Cache/merge/getKeyFromCache.ts","../src/Cache/merge/merge.ts","../src/Cache/utils/createPath.ts","../src/Cache/Transaction.ts","../src/Cache/Cache.ts","../src/Plugin/Plugins.ts","../src/Scheduler/queriesFromStacks.ts","../src/Scheduler/Query.ts","../src/Scheduler/Commit.ts","../src/Scheduler/Scheduler.ts","../src/Accessor/utils/onDataChange.ts","../src/Accessor/utils/syncValue.ts","../src/Interceptor.ts","../src/Accessor/Accessor.ts","../src/Accessor/FieldAccessor.ts","../src/Accessor/FragmentAccessor.ts","../src/Accessor/IndexAccessor.ts","../src/Accessor/RootAccessor.ts","../src/Accessor/getAccessor.ts","../src/Node/abstract/FieldsNode/FieldsNode.ts","../src/Node/traits/Data.ts","../src/Node/EnumNode.ts","../src/Node/Extension/NodeExtension.ts","../src/Node/Extension/createExtension.ts","../src/Node/Extension/Extension.ts","../src/Node/Extension/ComputableExtension.ts","../src/Node/Extension/StaticExtension.ts","../src/Node/Extension/ComputedExtension.ts","../src/Node/abstract/Matchable.ts","../src/Node/ScalarNode.ts","../src/Node/abstract/NodeContainer.ts","../src/Node/abstract/FieldsNode/FieldNode.ts","../src/Node/abstract/Abstract.ts","../src/Node/ArrayNode.ts","../src/Node/InterfaceNode.ts","../src/Node/ObjectNode.ts","../src/Node/UnionNode.ts","../src/Node/InputNode/InputNode.ts","../src/Node/InputNode/InputNodeField.ts","../src/Node/Arguments/Arguments.ts","../src/Node/Arguments/ArgumentsField.ts","../src/Client.ts","../src/helpers/Poller.ts","../src/helpers/matchUpdate.ts","../src/helpers/update.ts","../src/helpers/fragmentOn.ts","../src/helpers/refetch.ts","../src/helpers/preload.ts","../src/helpers/resolved.ts"],"sourcesContent":["import { ArrayNode, ObjectNode, DataTrait } from '../Node'\nimport { createEvent } from '@gqless/utils'\n\nexport type UValueData =\n  | string\n  | number\n  | boolean\n  | { [key: string]: Value }\n  | Value[]\n  | null\n\nlet id = 0\n\nexport class Value<TNode extends DataTrait = DataTrait> {\n  public id = ++id\n\n  private _data!: UValueData\n  public references = new Map<Value, Set<string | number>>()\n\n  constructor(\n    public node: TNode,\n    data: UValueData = node instanceof ArrayNode ? [] : {}\n  ) {\n    this.data = data\n    this.onSet.listen((key, value) => {\n      if (!this.references.has(value)) this.references.set(value, new Set())\n\n      const referencedKeys = this.references.get(value)!\n\n      if (!referencedKeys.size) this.onReference.emit(value)\n      referencedKeys.add(key)\n\n      this.onSet\n        .filter(k => k === key)\n        .then(() => {\n          referencedKeys.delete(key)\n          if (referencedKeys.size) return\n\n          this.references.delete(value)\n          this.onUnreference.emit(value)\n        })\n    })\n  }\n\n  // When a new Value is associated with a key\n  public onSet = createEvent<(key: string | number, value: Value) => void>()\n  // When data is updated (reference equality)\n  public onChange = createEvent<(prevData?: UValueData) => void>()\n\n  // When a Value becomes referenced\n  public onReference = createEvent<(value: Value) => void>()\n  // When a Value becomes de-refenerced\n  public onUnreference = createEvent<(value: Value) => void>()\n\n  public get data() {\n    return this._data\n  }\n\n  public set data(data: UValueData) {\n    const prevData = this._data\n    if (data === prevData) return\n\n    this._data = data\n\n    if (data && typeof data === 'object') {\n      Object.entries(data).forEach(([key, value]) => {\n        key = String(key)\n        if ((prevData as any)?.[key] === value) return\n\n        this.onSet.emit(key, value)\n      })\n    }\n\n    this.onChange.emit(prevData)\n  }\n\n  public get(key: string | number): Value | undefined {\n    if (this.data && typeof this.data === 'object') {\n      if (this.data.hasOwnProperty(key)) {\n        return (this.data as any)[key]\n      }\n    }\n\n    return undefined\n  }\n\n  public set(key: string | number, value: Value) {\n    key = String(key)\n    const prevValue = (this.data as any)?.[key]\n    if (prevValue === value) return\n    ;(this.data as any)[key] = value\n    this.onSet.emit(key, value)\n  }\n\n  public toJSON(deep = true): any {\n    if (deep !== true) return this.data\n\n    if (this.node instanceof ArrayNode) {\n      if (!this.data) return null\n\n      return (this.data as any[]).map(value => value.toJSON())\n    }\n\n    if (this.node instanceof ObjectNode) {\n      if (!this.data) return null\n\n      const obj: any = {\n        __typename: this.node.name,\n      }\n\n      Object.entries(this.data).forEach(([key, value]) => {\n        obj[key] = value.toJSON()\n      })\n      return obj\n    }\n\n    return this.data\n  }\n}\n","import { Value } from '../Value'\nimport { createEvent } from '@gqless/utils'\n\nexport const deepReference = (rootValue: Value) => {\n  const disposers = new Set<Function>()\n  const onReference = createEvent<(value: Value) => void>()\n  const onUnreference = createEvent<(value: Value) => void>()\n\n  let valueReferences = new WeakMap<Value, { count: number }>([\n    [rootValue, { count: 1 }], // Prevent RootValue from being unreferenced (handled on Cache)\n  ])\n\n  const watchAndEmit = (parentValue: Value) => {\n    const watcherDisposers = new Set<Function>()\n\n    const handleReference = (value: Value) => {\n      if (!valueReferences.has(value)) valueReferences.set(value, { count: 0 })\n      const references = valueReferences.get(value)!\n      const unrefFromParent = parentValue.onUnreference.filter(v => v === value)\n\n      // Update reference count\n      references.count++\n      unrefFromParent.then(() => {\n        references.count--\n\n        if (references.count) return\n        onUnreference.emit(value)\n      })\n\n      // If there's another reference beside our own,\n      // delegate to it\n      if (references.count !== 1) return\n\n      onReference.emit(value)\n      const dispose = watchAndEmit(value)\n\n      // When the root is disposed, dispose watcher\n      disposers.add(dispose)\n      // else wait until value is globally unreferenced\n      onUnreference.filter(v => v === value).then(dispose)\n    }\n\n    // Handle references created, before watchAndEmit called\n    for (const ref of parentValue.references.keys()) {\n      handleReference(ref)\n    }\n\n    watcherDisposers.add(\n      // When the parent value references a new value\n      // recursively watch it\n      parentValue.onReference.listen(handleReference)\n    )\n\n    return () => watcherDisposers.forEach(dispose => dispose())\n  }\n\n  const disposeWatcher = watchAndEmit(rootValue)\n\n  return {\n    onReference,\n    onUnreference,\n    dispose() {\n      disposers.forEach(dispose => dispose())\n      disposeWatcher()\n    },\n  }\n}\n","import { Value } from '../Value'\nimport { EnumNode, ScalarNode, DataTrait } from '../../Node'\n\nexport const createValue = (node: DataTrait, data?: any) =>\n  new Value(\n    node,\n    // Only initialize with data if it's ScalarNode or EnumNode\n    data === null\n      ? null\n      : node instanceof ScalarNode || node instanceof EnumNode\n      ? data\n      : undefined\n  )\n","import { Extension, DataTrait } from '../../Node'\n\nexport const extensionsForKey = (\n  extensions: Extension[],\n  get: (e: Extension) => Extension | undefined,\n  ...nodes: DataTrait[]\n) => {\n  const keyedExtensions: Extension[] = []\n\n  for (const extension of extensions) {\n    const keyExtension = get(extension)\n    if (!keyExtension) continue\n    keyedExtensions.push(keyExtension)\n  }\n\n  for (const node of nodes) {\n    const extension = node?.extension\n    if (!extension) continue\n    keyedExtensions.push(extension)\n  }\n\n  return keyedExtensions\n}\n","import { createEvent, invariant } from '@gqless/utils'\nimport { DataTrait } from '../Node'\n\nexport class Selection<TNode extends DataTrait = DataTrait> {\n  // Selections that should be fetched with all queries\n  public keySelections = new Set<Selection>()\n  public selections = new Set<Selection>()\n\n  /**\n   * Emitted when a child selection is created\n   */\n  public onSelect = createEvent<(selection: Selection) => void>()\n  /**\n   * Emitted when a child selection is unselected\n   */\n  public onUnselect = createEvent<(selection: Selection) => void>()\n\n  constructor(public node: TNode) {}\n\n  public add(selection: Selection, isKeySelection = false) {\n    invariant(selection !== this, `Circular selections are not permitted!`)\n\n    if (isKeySelection) this.keySelections.add(selection)\n    if (this.selections.has(selection)) return\n\n    this.selections.add(selection)\n    this.onSelect.emit(selection)\n\n    // Forward events\n    selection.onSelect.listen(this.onSelect.emit)\n    selection.onUnselect.listen(this.onUnselect.emit)\n  }\n\n  public get<TSelection extends Selection>(\n    find: ((selection: Selection) => boolean) | string | number\n  ): TSelection | undefined {\n    for (const selection of this.selections) {\n      if (\n        typeof find === 'function'\n          ? find(selection)\n          : String(selection) === String(find)\n      )\n        return selection as any\n    }\n    return\n  }\n\n  public delete(selection: Selection) {\n    if (!this.selections.has(selection)) return\n    this.selections.delete(selection)\n    this.keySelections.delete(selection)\n\n    // Unforward events\n    selection.onSelect.off(this.onSelect.emit)\n    selection.onUnselect.off(this.onUnselect.emit)\n\n    const emitUnselect = (selection: Selection) => {\n      // Emit unselect for each selection\n      this.onUnselect.emit(selection)\n      selection.selections.forEach(emitUnselect)\n    }\n\n    emitUnselect(selection)\n  }\n\n  public toString() {\n    return String(this.node)\n  }\n}\n","import { invariant } from '@gqless/utils'\n\nimport { UArguments } from '../Node'\n\nexport interface IVariableOptions {\n  node?: UArguments\n  nullable?: boolean\n  /**\n   * GraphQL variable name to use.\n   *\n   * Conflicts are handled automatically\n   */\n  name?: string\n}\n\nexport class Variable<TValue = any> {\n  public node?: UArguments\n  public value?: TValue\n\n  public nullable?: boolean\n  public name?: string\n\n  constructor(value?: TValue, public options: IVariableOptions = {}) {\n    Object.assign(this, options)\n\n    this.updateValue(value)\n  }\n\n  public updateValue(value?: TValue) {\n    if (value === this.value) return\n\n    if (value === null) {\n      invariant(\n        this.nullable !== false,\n        `Can't set non-nullable variable of type ${this.node}, to null`\n      )\n    }\n\n    this.value = value\n  }\n\n  public updateNullable(nullable: boolean) {\n    if (this.nullable === true) {\n      invariant(\n        nullable,\n        `Can't convert a nullable variable of type ${this.node}, to non-nullable`\n      )\n    }\n\n    if (this.nullable !== false) {\n      this.nullable = nullable\n    }\n  }\n\n  public validateNode(node: UArguments, nullable?: boolean) {\n    if (!this.node) this.node = node\n\n    invariant(\n      this.node === node,\n      `Cannot change variable from type '${this.node}' to '${node}`\n    )\n\n    if (nullable !== undefined) {\n      this.updateNullable(nullable)\n    }\n  }\n\n  public toString() {\n    return `${this.node}${this.nullable ? '' : '!'}`\n  }\n\n  public toJSON() {\n    return this.value\n  }\n}\n","export class Disposable {\n  private disposers = new Set<Function>()\n\n  protected disposed = false\n\n  public addDisposer(...disposers: any[]) {\n    disposers.forEach(\n      dispose => typeof dispose === 'function' && this.disposers.add(dispose)\n    )\n    return () => this.deleteDiposer(...disposers)\n  }\n\n  public deleteDiposer(...disposers: any[]) {\n    disposers.forEach(\n      dispose => typeof dispose === 'function' && this.disposers.delete(dispose)\n    )\n  }\n\n  public dispose() {\n    if (this.disposed) return\n\n    this.disposed = true\n    this.disposers.forEach(dispose => dispose.call(this))\n  }\n}\n","export const uniquify = (\n  desiredName: string,\n  isTaken: (name: string) => boolean,\n  uniquify = (name: string, id: number) => `${name}${id}`\n) => {\n  const unique = (id = 2): string => {\n    const differentName = uniquify(desiredName, id)\n\n    return isTaken(differentName) ? unique(id + 1) : differentName\n  }\n  return isTaken(desiredName) ? unique() : desiredName\n}\n","export const deepJSONEqual = (\n  a: any,\n  b: any,\n  customCompare?: (a: any, b: any) => boolean | undefined\n) => {\n  const isEqual = customCompare?.(a,b)\n  if (isEqual !== undefined) return isEqual\n\n  // Called in JSON.stringify (currently not used internally)\n  if (a && typeof a.toJSON === 'function') a = a.toJSON()\n  if (b && typeof b.toJSON === 'function') b = b.toJSON()\n\n  if (a === b) return true\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false\n\n    let length: number, i: number, key: string, keys: string[]\n\n    if (Array.isArray(a)) {\n      length = a.length\n\n      if (length !== b.length) return false\n      for (i = length; i-- !== 0; ) if (!deepJSONEqual(a[i], b[i], customCompare)) return false\n      return true\n    }\n\n    keys = Object.keys(a)\n    length = keys.length\n\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      key = keys[i]\n      if (!deepJSONEqual(a[key], b[key], customCompare)) return false\n    }\n\n    return true\n  }\n\n  return a !== a && b !== b\n}\n","export class PathArray<T> extends Array<T> {\n  constructor(...items: T[]) {\n    super(...items)\n    Object.setPrototypeOf(this, Object.create(PathArray.prototype))\n  }\n\n  public toString() {\n    return this.map(element => String(element)).join('.')\n  }\n}\n","export const camelCase = (value: string[]): string =>\n  value\n    .map((word: string, i: number) => {\n      if (i === 0) return word\n      return word[0].toUpperCase() + word.substr(1)\n    })\n    .join('')\n","export const arrayEqual = (a: any[], b: any[]) => {\n  if (a === b) return true\n  if (a == null || b == null) return false\n  if (a.length != b.length) return false\n\n  return a.every((value, i) => b[i] === value)\n}\n","import { Variable } from '../Variable'\nimport { UArguments } from '../Node'\nimport { uniquify, camelCase } from '../utils'\nimport { Formatter } from './Formatter'\n\nexport type Variables = Map<string, Variable>\n\nexport interface ConnectedVariable {\n  node?: UArguments\n  nullable?: boolean\n  variables?: Map<string, Variable>\n  path?: string[]\n}\n\nexport const buildVariable = ({ options }:  Formatter, variable: Variable, info?: ConnectedVariable) => {\n  let name =\n    variable.name! || (options.prettify && info?.path ? camelCase(info.path) : 'v')\n\n  if (info) {\n    if (info.node) variable.validateNode(info.node, info.nullable)\n\n    if (info.variables) {\n      const existingVariable = info.variables.has(name)\n\n      if (existingVariable) {\n        name = uniquify(name, name => info.variables!.has(name))\n      }\n\n      info.variables.set(name, variable)\n    }\n  }\n\n  return `$${name}`\n}\n","import { Formatter } from './Formatter'\nimport { Variable } from '../Variable'\nimport { buildVariable, ConnectedVariable } from './buildVariable'\nimport {\n  Arguments,\n  InputNode,\n  ArrayNode,\n  EnumNode,\n  ScalarNode,\n  UArguments,\n} from '../Node'\n\ninterface ArgContext<TNode extends object = object> {\n  node: TNode\n  nullable: boolean\n}\n\nexport const buildArguments = (\n  { SPACE, SEPARATOR, options, formatter }: Formatter,\n  args: Record<string, any>,\n  info?: Omit<ConnectedVariable, 'nullable' | 'node'> & { node: Arguments }\n) => {\n  const buildKeyed = (\n    arg: Record<string, any>,\n    path: string[],\n    context?: ArgContext<Arguments | InputNode>\n  ) => {\n    const keys = Object.keys(arg)\n    keys.sort()\n\n    return keys\n      .map(key => {\n        let keyContext: ArgContext | undefined\n\n        if (context) {\n          const field = context.node.inputs[key]\n          if (!field) return\n\n          keyContext = {\n            node: field.ofNode,\n            nullable: field.nullable,\n          }\n        }\n\n        const result = build(arg[key], [...path, key], keyContext)\n        if (result === undefined) return\n\n        return `${key}:${SPACE}${result}`\n      })\n      .filter(Boolean)\n      .join(SEPARATOR)\n  }\n\n  const build = (\n    arg: any,\n    path: string[],\n    context?: ArgContext<any>\n  ): string => {\n    if (options.variables && arg instanceof Variable) {\n      return buildVariable(formatter, arg, {\n        ...info,\n        ...(context as ArgContext<UArguments>),\n        path: [...((info && info.path) || []), ...path],\n      })\n    }\n\n    if (arg && typeof arg.toJSON === 'function') arg = arg.toJSON()\n\n    if (arg === null) {\n      return 'null'\n    }\n\n    if (context?.node instanceof EnumNode) {\n      return arg\n    }\n\n    if (\n      typeof arg === 'string' ||\n      typeof arg === 'number' ||\n      typeof arg === 'boolean'\n    )\n      return JSON.stringify(arg)\n\n    if (context?.node instanceof ScalarNode) {\n      // Object / Array passed as scalar\n      // serialize as a JSON-string\n      return JSON.stringify(JSON.stringify(arg))\n    }\n\n    if (Array.isArray(arg)) {\n      let indexContext: ArgContext | undefined\n      if (context) {\n        const arrayNode = context.node as ArrayNode\n        indexContext = {\n          node: arrayNode.ofNode,\n          nullable: arrayNode.nullable,\n        }\n      }\n\n      return `[${arg.map(a => build(a, path, indexContext)).join(SEPARATOR)}]`\n    }\n\n    return `{${SPACE}${buildKeyed(arg, path, context)}${SPACE}}`\n  }\n\n  return buildKeyed(args, [], info && { node: info.node, nullable: false })\n}\n","import { SelectionTree } from './SelectionTree'\nimport { FieldSelection, Fragment } from '../Selection'\nimport { Formatter } from './Formatter'\nimport { buildArguments } from './buildArguments'\nimport { EnumNode, NodeContainer, ObjectNode, ScalarNode } from '../Node'\nimport { Variables } from './buildVariable'\n\nexport const buildSelections = (\n  { LINE_SEPARATOR, formatter }: Formatter,\n  tree: SelectionTree,\n  variables?: Variables\n) => {\n  const innerNode =\n    tree.selection.node instanceof NodeContainer\n      ? tree.selection.node.innerNode\n      : tree.selection.node\n\n  if (innerNode instanceof ScalarNode || innerNode instanceof EnumNode)\n    return ''\n\n  const includeTypename =\n    // When no selections or not on ObjectNode\n    (!tree.children.length || !(innerNode instanceof ObjectNode)) &&\n    // fragments should never need __typename\n    !(tree.selection instanceof Fragment)\n\n  const selections = [\n    includeTypename && '__typename',\n    ...tree.children.map(tree =>\n      buildSelectionTree(formatter, tree, variables)\n    ),\n  ].filter(Boolean)\n\n  if (!selections.length) return ''\n\n  return selections.join(LINE_SEPARATOR)\n}\n\nconst buildFieldSelectionTree = (\n  { SPACE, hug, indent, formatter }: Formatter,\n  tree: SelectionTree<FieldSelection>,\n  variables?: Variables\n): string => {\n  const buildAlias = () => {\n    if (!tree.alias) return ''\n    return `${tree.alias}:${SPACE}`\n  }\n\n  const buildArgs = () => {\n    const args = tree.selection.args\n    if (!args) return ''\n\n    return `(${buildArguments(formatter, args, {\n      variables,\n      node: tree.selection.field.args!,\n      path: [tree.selection.field.name],\n    })})`\n  }\n\n  const buildChildren = () => {\n    const selections = buildSelections(formatter, tree, variables)\n    if (!selections) return ''\n\n    return `${SPACE}${hug(indent(selections))}`\n  }\n\n  return `${buildAlias()}${\n    tree.selection!.field.name\n  }${buildArgs()}${buildChildren()}`\n}\n\nconst buildFragmentTree = (\n  { SPACE, hug, indent, formatter }: Formatter,\n  tree: SelectionTree<Fragment>\n) => {\n  const fragmentName = tree.allFragments.get(tree.selection)\n\n  if (formatter.options.fragments !== 'inline' && fragmentName) {\n    return `...${fragmentName}`\n  }\n\n  const parentNode =\n    tree.parent!.selection.node instanceof NodeContainer\n      ? tree.parent!.selection.node.innerNode\n      : tree.parent!.selection.node\n\n  // If it's on the same node, and inline then omit type\n  if (tree.selection.node === parentNode) {\n    return buildSelections(formatter, tree)\n  }\n\n  let selections = buildSelections(formatter, tree)\n  if (!selections) return ''\n\n  let huggedSelections = hug(indent(selections))\n\n  // Add comment with fragment name (for debugging)\n  if (__DEV__ && formatter.options.prettify && tree.selection.name) {\n    huggedSelections = huggedSelections.replace(\n      '{',\n      `{ #[${tree.selection.name}]`\n    )\n  }\n\n  return `...${SPACE}on ${tree.selection.node}${SPACE}${huggedSelections}`\n}\n\nexport const buildSelectionTree = (\n  { formatter }: Formatter,\n  tree: SelectionTree,\n  variables?: Variables\n): string => {\n  if (tree.selection instanceof FieldSelection)\n    return buildFieldSelectionTree(formatter, tree as any, variables)\n\n  if (tree.selection instanceof Fragment)\n    return buildFragmentTree(formatter, tree as any)\n\n  return buildSelections(formatter, tree, variables)\n}\n","import { SelectionTree } from './SelectionTree'\nimport { FieldSelection } from '../../Selection'\nimport { createMemo } from '@gqless/utils'\n\nconst memoized = createMemo()\nlet id = 0\n\nexport const getAlias = (tree: SelectionTree<FieldSelection>) => {\n  if (!tree.parent) return\n\n  for (const siblingTree of tree.parent.children) {\n    if (siblingTree.selection instanceof FieldSelection) {\n      if (\n        tree.selection !== siblingTree.selection ||\n        tree.selection.field === siblingTree.selection.field\n      ) {\n        id = (id + 1) % Number.MAX_VALUE\n        return `${tree.selection.field.name}__${id}`\n      }\n    }\n  }\n\n  return ''\n\n  // this was causing issues with names - we need to add id to every field\n  // plus the memoization in prod mode caused a big bug\n  // const fieldAliases = memoized(() => {\n  //   const aliases = new Map<FieldSelection, string>()\n\n  //   let id = 0\n  //   tree.parent!.children.forEach(siblingTree => {\n  //     if (!(siblingTree.selection instanceof FieldSelection)) return\n\n  //     if (\n  //       tree.selection === siblingTree.selection ||\n  //       tree.selection.field !== siblingTree.selection.field\n  //     )\n  //       return\n\n  //     aliases.set(tree.selection, `${tree.selection.field.name}__${++id}`)\n  //   })\n  //   return aliases\n  // }, [tree.parent, tree.selection.field])\n\n  // return fieldAliases.get(tree.selection)!\n}\n","import { SelectionTree } from './SelectionTree'\nimport { invariant } from '@gqless/utils'\nimport { ObjectNode, ArrayNode } from '../../Node'\nimport { Fragment } from '../../Selection'\n\n/**\n * Resolves aliases from a JSON object, back into cache-compatible\n * keys\n *\n * eg. user -> user(id: 100)\n */\nexport function resolveAliases(this: SelectionTree, data: any) {\n  const recurse = (node: object, data: any) => {\n    if (!data) return\n\n    if (node instanceof ObjectNode) {\n      let originals = new Map<string, any>()\n      let updated = new Set<string>()\n\n      const recurseObjectTree = (tree: SelectionTree) =>\n        tree.children.forEach(tree => {\n          if (tree.selection instanceof Fragment) {\n            recurseObjectTree(tree)\n            return\n          }\n\n          if (!data.hasOwnProperty(tree.key!)) return\n          const cacheKey = tree.selection.toString()\n\n          let value = data[tree.key!]\n          if (originals.has(tree.key!)) {\n            value = originals.get(tree.key!)\n            originals.delete(tree.key!)\n          }\n\n          if (tree.key !== cacheKey) {\n            // If the key already exists, record original value\n            if (data.hasOwnProperty(cacheKey))\n              originals.set(cacheKey, data[cacheKey])\n\n            data[cacheKey] = value\n            updated.add(cacheKey)\n\n            // Only delete, if it hasn't been updated\n            if (!updated.has(tree.key!)) delete data[tree.key!]\n          }\n\n          tree.resolveAliases(value)\n        })\n\n      recurseObjectTree(this)\n\n      invariant(\n        !originals.size,\n        `Unable to resolve aliases for keys ${Array.from(originals.keys())\n          .map(k => `'${k}'`)\n          .join(', ')} [at path ${this.toString()}]`\n      )\n    }\n\n    if (node instanceof ArrayNode) {\n      ;(data as any[]).forEach(indexData => recurse(node.ofNode, indexData))\n    }\n  }\n\n  recurse(this.selection.node, data)\n}\n","import { Selection, FieldSelection, Fragment } from '../../Selection'\nimport { getAlias } from './getAlias'\nimport { computed } from '@gqless/utils'\nimport { uniquify } from '../../utils'\nimport { resolveAliases } from './resolveAliases'\n\nexport class SelectionTree<TSelection extends Selection = Selection> {\n  public duplicatedFragments: Map<string, SelectionTree<Fragment>> = this.parent\n    ? (this.parent as any).duplicatedFragments\n    : new Map()\n\n  public allFragments: WeakMap<Fragment, string | undefined> = this.parent\n    ? (this.parent as any).allFragments\n    : new WeakMap()\n\n  public children: SelectionTree[] = []\n\n  constructor(public selection: TSelection, public parent?: SelectionTree) {\n    const fragmentTree = this.getExistingTree()\n\n    if (fragmentTree) return fragmentTree as any\n  }\n\n  private getExistingTree(): SelectionTree<Fragment> | void {\n    if (!(this.selection instanceof Fragment)) return\n    const fragment: Fragment = this.selection as any\n\n    // If it already exists, convert from inline->named\n    if (this.allFragments.has(fragment)) {\n      // only if not already named,\n      const existingName = this.allFragments.get(fragment)\n      if (existingName) return this.duplicatedFragments.get(existingName)\n\n      const name = uniquify(fragment.toString(), name =>\n        this.duplicatedFragments.has(name)\n      )\n\n      this.duplicatedFragments.set(name, this as any)\n      this.allFragments.set(fragment, name)\n      return\n    }\n\n    // Add as inline first\n    this.allFragments.set(fragment, undefined)\n  }\n\n  public resolveAliases = resolveAliases\n\n  @computed\n  public get path(): SelectionTree<any>[] {\n    return this.parent ? [...this.parent.path, this] : [this]\n  }\n\n  @computed\n  public get alias(): string | undefined {\n    if (!(this.selection instanceof FieldSelection)) return\n    return getAlias(this as any)\n  }\n\n  @computed\n  public get key() {\n    if (!(this.selection instanceof FieldSelection)) return\n    return this.alias || this.selection.field.name\n  }\n\n  public toString() {\n    return this.path.map(t => t.selection.toString()).join('.')\n  }\n}\n","import { Selection, Fragment } from '../../Selection'\nimport { SelectionTree } from './SelectionTree'\n\nexport const toTree = (selections: (Selection | Selection[])[]) => {\n  const rootTree = new SelectionTree({ toString: () => 'RootTree' } as any)\n\n  const addSelectionToTree = (\n    tree: SelectionTree<any>,\n    ...pathToSelection: Selection[]\n  ) => {\n    for (let i = 0; i < pathToSelection.length; i++) {\n      const selection = pathToSelection[i]\n\n      // Filter out empty fragments\n      if (selection instanceof Fragment) {\n        // try and find a non-empty fragment somewhere after the path\n        // TODO fixme: this doesn't work for nested fragments that are empty\n        // eg.\n        //  frag A { ... B } -> A should be ignored\n        //  frag B { }\n        const validSelection = pathToSelection\n          .slice(i)\n          .find(s => !(s instanceof Fragment) || s.selections.size)\n\n        if (!validSelection) return\n      }\n\n      let index = tree.children.findIndex(t => t.selection === selection)\n      if (index > -1) {\n        tree = tree.children[index]\n      } else {\n        const newTree = new SelectionTree(selection, tree)\n        tree.children.push(newTree)\n        tree = newTree\n      }\n\n      // Add all the keySelections to the tree\n      selection.keySelections.forEach(keySelection => {\n        addSelectionToTree(tree, keySelection)\n      })\n    }\n\n    const selection = pathToSelection[pathToSelection.length - 1]\n\n    selection.selections.forEach(selection =>\n      addSelectionToTree(tree, selection)\n    )\n  }\n\n  selections.forEach(selections =>\n    addSelectionToTree(\n      rootTree,\n      ...(Array.isArray(selections) ? selections : [selections])\n    )\n  )\n\n  return rootTree\n}\n","import { SelectionTree } from './SelectionTree'\nimport { Formatter } from './Formatter'\nimport { Fragment } from '../Selection'\nimport { buildSelections } from './buildSelection'\n\nexport const buildFragments = (\n  { SPACE, NEWLINE, hug, indent, formatter }: Formatter,\n  tree: SelectionTree\n) => {\n  if (formatter.options.fragments === 'inline') return ''\n\n  const buildFragment = (\n    name: string,\n    fragmentTree: SelectionTree<Fragment>\n  ) => {\n    return `fragment ${name} on ${fragmentTree.selection.node}${SPACE}${hug(\n      indent(buildSelections(formatter, fragmentTree))\n    )}`\n  }\n\n  return Array.from(tree.duplicatedFragments)\n    .map(([name, tree]) => buildFragment(name, tree))\n    .join(NEWLINE)\n}\n","import { Formatter } from './Formatter'\nimport { Selection } from '../Selection'\nimport { toTree, SelectionTree } from './SelectionTree'\nimport { buildSelectionTree } from './buildSelection'\nimport { Variables } from './buildVariable'\nimport { ObjectNode } from '../Node'\nimport { buildFragments } from './buildFragments'\n\nexport const buildQuery = (\n  { SPACE, SEPARATOR, NEWLINE, hug, indent, formatter }: Formatter,\n  queryName?: string,\n  ...selectionPaths: Selection[][]\n) => {\n  const rootTree = toTree(selectionPaths).children[0] as SelectionTree<\n    Selection<ObjectNode>\n  >\n  const variablesMap: Variables = new Map()\n  const selections = buildSelectionTree(formatter, rootTree, variablesMap)\n\n  const buildVariables = () => {\n    if (!variablesMap.size) return ''\n\n    return `(${Array.from(variablesMap)\n      .map(([name, variable]) => `$${name}:${SPACE}${variable}`)\n      .join(SEPARATOR)})`\n  }\n\n  const queryHeader = `${queryName ? ' ' + queryName : ''}${buildVariables()}`\n\n  const query = [\n    `${queryHeader ? `query${queryHeader}${SPACE}` : ''}${hug(\n      indent(selections)\n    )}`,\n    buildFragments(formatter, rootTree),\n  ]\n    .filter(Boolean)\n    .join(NEWLINE + NEWLINE)\n\n  let variables: Record<string, any> | undefined\n\n  if (variablesMap.size) {\n    variables = {}\n    variablesMap.forEach(\n      (variable, name) => (variables![name] = variable.toJSON())\n    )\n  }\n\n  return { rootTree, query, variables }\n}\n\nexport * from './SelectionTree'\n","export interface IFormatterOptions {\n  /**\n   * Makes the query human readable\n   * @default process.env.NODE_ENV === 'development'\n   */\n  prettify?: boolean\n\n  /**\n   * Output GraphQL variables references.\n   * If set to false, variable values will be inlined\n   * @default false\n   */\n  variables?: boolean\n\n  /**\n   * Whether or not to extract fragments into a shared definition\n   * inline: all fragments will be inlined\n   * auto: all fragments will be inlined, unless duplicated\n   * @default inline\n   */\n  fragments?: 'auto' | 'inline'\n}\n\nexport class Formatter {\n  public formatter = this\n  public options: Required<IFormatterOptions>\n\n  public SPACE: string\n  public SEPARATOR: string\n  public LINE_SEPARATOR: string\n  public NEWLINE: string\n\n  constructor({\n    prettify = __DEV__,\n    variables = false,\n    fragments = 'inline',\n  }: IFormatterOptions = {}) {\n    this.options = {\n      prettify,\n      variables,\n      fragments,\n    }\n\n    this.SPACE = prettify ? ' ' : ''\n    this.SEPARATOR = `,${this.SPACE}`\n    this.LINE_SEPARATOR = prettify ? `\\n` : this.SEPARATOR\n    this.NEWLINE = prettify ? '\\n' : ''\n  }\n\n  public indent = (string: string) => {\n    if (!this.SPACE) return string\n\n    return string.replace(/^/gm, this.SPACE.repeat(2))\n  }\n\n  public hug = (string: string) => {\n    return `{${this.NEWLINE}${string}${this.NEWLINE}}`\n  }\n}\n","import { buildArguments, Formatter } from '../QueryBuilder'\n\nimport { FieldNode, DataTrait } from '../Node'\nimport { Selection } from './Selection'\n\nconst argsFormatter = new Formatter({ prettify: false, variables: false })\n\nexport class FieldSelection<\n  TNode extends DataTrait = DataTrait\n> extends Selection<TNode> {\n  constructor(\n    public field: FieldNode<TNode>,\n    public readonly args?: Record<string, any>\n  ) {\n    super(field.ofNode)\n  }\n\n  public toString() {\n    const args = this.args\n      ? `(${buildArguments(argsFormatter, this.args, {\n          node: this.field.args!,\n        })})`\n      : ''\n\n    return this.field.name + args\n  }\n}\n","import { Selection } from './Selection'\nimport { ObjectNode, InterfaceNode } from '../Node'\n\nexport type UFragment = ObjectNode | InterfaceNode\n\nexport class Fragment<TNode extends UFragment = UFragment> extends Selection<\n  TNode\n> {\n  constructor(node: TNode, public name?: string) {\n    super(node)\n  }\n\n  public toString() {\n    return this.name || `${this.node || ''}Fragment`\n  }\n}\n","import { Selection, Fragment } from '../../Selection'\n\nexport const selectionsForKey = (\n  key: string,\n  ...selectionsFilter: Selection[]\n) => {\n  const selections: Selection[] = []\n\n  for (const selection of selectionsFilter) {\n    if (selection instanceof Fragment) {\n      selections.push(...selectionsForKey(key, ...selection.selections))\n      continue\n    }\n\n    if (selection.toString() === key) {\n      selections.push(selection)\n    }\n  }\n\n  return selections\n}\n","import { Value } from './Value'\nimport { Matchable, keyIsEqual, DataTrait } from '../Node'\nimport { invariant } from '@gqless/utils'\nimport stringify from 'json-stable-stringify'\n\nexport class NodeEntry {\n  public instances = new Set<Value>()\n  public keys = new Map<any, Value>()\n\n  constructor(public node: DataTrait) {}\n\n  public match(data: any) {\n    invariant(\n      this.node instanceof Matchable,\n      `${this.node} does not support pattern matching`\n    )\n\n    for (const value of this.instances) {\n      const exactValue = this.node.match(value, data)\n      if (exactValue)\n        return {\n          value,\n          exactValue,\n        }\n    }\n\n    return\n  }\n\n  public getByKey(key: any) {\n    // First try and find key directly\n    if (this.keys.has(key)) return this.keys.get(key)\n\n    // else find structurally equal value\n    for (const [possibleKey, value] of this.keys) {\n      if (keyIsEqual(key, possibleKey)) return value\n    }\n\n    return undefined\n  }\n\n  public toJSON(deep = true) {\n    const keys: Record<string, any> = {}\n\n    this.keys.forEach((value, key) => {\n      keys[stringify(key)] = deep === true ? value.toJSON() : value\n    })\n\n    return {\n      keys,\n      instances: Array.from(this.instances).map(value =>\n        deep === true ? value.toJSON() : value\n      ),\n    }\n  }\n}\n","import { Value } from '../Value'\nimport { keyIsValid, Extension } from '../../Node'\nimport { NodeEntry } from '../NodeEntry'\nimport { Cache } from '../Cache'\n\nexport const getKeyFromCache = (cache: Cache, value: Value, extensions: Extension[]) => {\n  const node = value.node\n\n  let entry = cache.entries.get(node)\n\n  // Iterate through extensions and call GET_KEY\n  // if the key exists in the cache, then return it\n  // else create a new cache entry\n  let preferedKey: unknown\n  let result: { key: any, value: Value } | undefined\n  for (const extension of extensions) {\n    if (!extension.isKeyable) continue\n\n    const key = extension.getKey(value)\n    if (!keyIsValid(key)) continue\n    if (!keyIsValid(preferedKey)) preferedKey = key\n\n    // Check to see if the key already exists in cache\n    const keyedValue = entry?.getByKey(key)\n\n    if (!result && keyedValue) {\n      result = { key, value: keyedValue }\n      // if there's no value, complete loop before returning\n      if (value) return result\n    }\n  }\n\n  if (result) return result\n\n  // no keyed extension found\n  if (!keyIsValid(preferedKey) || !value) return\n\n  if (!entry) {\n    entry = new NodeEntry(node)\n    cache.entries.set(node, entry)\n  }\n\n  // add a new key to cache\n  entry.keys.set(preferedKey, value)\n\n  return { key: preferedKey, value }\n}\n","import { Value } from '../Value'\nimport { EnumNode, ObjectNode, ScalarNode, ArrayNode, DataTrait, Extension, FieldNode, UFieldsNode, getAbstractImplementation } from '../../Node'\nimport { createValue } from './createValue'\nimport { Selection, Fragment } from '../../Selection'\nimport { extensionsForKey } from './extensionsForKey'\nimport { selectionsForKey } from './selectionsForKey'\nimport { Cache } from '../Cache'\nimport { getKeyFromCache } from './getKeyFromCache'\n\nconst FIELD_NAME = /^([^(]+)\\(?/\n\n\n/**\n * Merge-updates a value\n * @param value value to update\n * @param data data to merge\n * @param extensions (optional) pass to enable cache keys\n * @param selectionsFilter (optional) pass to filter merging\n *\n * @returns mergeFiltered - merges the data omitted by selectionsFilter\n */\nexport const merge = (cache: Cache, value: Value, data: any, extensions: Extension[] = [], ...selectionsFilter: Selection[]): Function | undefined => {\n  if (value.node instanceof ScalarNode || value.node instanceof EnumNode) {\n    mergeScalar(value as any, data)\n    return\n  }\n\n  const wasNull = value.data === null\n  const isNull = data === null\n\n  // don't do anything if both are null\n  if (wasNull && isNull) return\n\n  // simply update for null\n  if (isNull) {\n    value.data = null\n    return\n  }\n\n  if (value.node instanceof ObjectNode) {\n    if (wasNull) value.data = {}\n    return iterateObject(cache, value as any, data, extensions, ...selectionsFilter)\n  }\n\n  if (value.node instanceof ArrayNode) {\n    // Update the array length (removing values if needed)\n    value.data = wasNull ? [] : (value.data as any[]).slice(0, data.length)\n    iterateArray(cache, value as any, data, extensions)\n    return\n  }\n  return\n}\n\nconst keyedMerge = (cache: Cache, node: DataTrait, data: any, extensions: Extension[], ...selectionsFilter: Selection[]) => {\n  const keyFragments: Fragment[] = []\n  for (const { fragment } of extensions) {\n    if (!fragment) continue\n    if (keyFragments.includes(fragment)) continue\n    keyFragments.push(fragment)\n  }\n  if (!keyFragments.length) return\n\n  // Create a *temporary* value with the fields needed to perform a key-operation\n  const keyedValue = createValue(node, data)\n\n  // Merge only the fields required for a key-op into the new value\n  const completeMerge = merge(cache, keyedValue, data, extensions, ...keyFragments)\n\n  // Find a key, and get value from cache\n  const result = getKeyFromCache(cache, keyedValue, extensions)\n\n  // No result, discard keyedValue\n  if (!result) return\n\n  // If the value was already in the cache,\n  // discard keyedValue and merge oncemore\n  if (result.value !== keyedValue) {\n    merge(cache, result.value, data, extensions, ...selectionsFilter)\n  } else {\n    // Value wasn't in cache, so merge the rest of data\n    // on the keyedValue\n    completeMerge?.()\n  }\n\n  return result.value\n}\n\nconst mergeScalar = (value: Value<ScalarNode>, data: any) => {\n  // Scalar's can't be keyed, so simply update\n  value.data = data\n}\n\nconst iterateArray = (cache: Cache, arrayValue: Value<ArrayNode<DataTrait>>, data: any[], arrayExtensions: Extension[], ...selectionsFilter: Selection[]) => {\n  data.forEach((data, key) => {\n    const node = arrayValue.node.ofNode\n    const nodeImplementation = getAbstractImplementation(node, data?.__typename)\n    const extensions = extensionsForKey(arrayExtensions, e => e.childIndex(), node, nodeImplementation, node)\n\n    let value = arrayValue.get(key)\n\n    const keyedValue = keyedMerge(cache, nodeImplementation || node, data, extensions, ...selectionsFilter)\n    if (keyedValue) {\n      arrayValue.set(key, keyedValue)\n      return\n    }\n\n    if (!value) {\n      value = createValue(nodeImplementation || node, data)\n      arrayValue.set(key, value)\n    }\n\n    merge(cache, value, data, extensions, ...selectionsFilter)\n  })\n}\n\nconst iterateObject = (cache: Cache, objectValue: Value<ObjectNode>, objectData: Record<string, any>, objectExtensions: Extension[], ...selectionsFilter: Selection[]) => {\n  function mergeObjectKey(key: string, ...filteredSelections: Selection[]) {\n    let fieldName = key\n    if (!(key in objectValue.node.fields))  {\n      fieldName = fieldName.match(FIELD_NAME)?.[1]!\n      if (!fieldName || !(fieldName in objectValue.node.fields)) return\n    }\n\n    const field = objectValue.node.fields[fieldName] as FieldNode<UFieldsNode & DataTrait>\n    const data = objectData[key]\n    const node = field.ofNode\n    const nodeImplementation = getAbstractImplementation(node, data?.__typename)\n    const extensions = extensionsForKey(objectExtensions, e => e.childField(field), nodeImplementation, node)\n\n    let value = objectValue.get(key)\n\n    const keyedValue = keyedMerge(cache, nodeImplementation || node, data, extensions, ...filteredSelections)\n    if (keyedValue) {\n      objectValue.set(key, keyedValue)\n      return\n    }\n\n    if (!value) {\n      value = createValue(nodeImplementation || node, data)\n      objectValue.set(key, value)\n    }\n\n    merge(\n      cache,\n      value,\n      objectData[key],\n      extensions,\n      ...filteredSelections\n    )\n  }\n\n  const mergeFiltered: Function[] = []\n\n  for (const key in objectData) {\n    if (key === '__typename') continue\n\n    const selections = selectionsForKey(key, ...selectionsFilter)\n\n    // If it's not selected, add to mergeFiltered\n    if (selectionsFilter.length && !selections.length) {\n      mergeFiltered.push(() => mergeObjectKey(key, ...selections))\n      continue\n    }\n\n    mergeObjectKey(key, ...selections)\n  }\n\n  return mergeFiltered.length ? () => {\n    for (const merge of mergeFiltered) {\n      merge()\n    }\n  } : undefined\n}\n","import { Accessor } from '../../Accessor'\nimport { createValue } from '../merge'\nimport { getAbstractImplementation } from '../../Node'\n\nexport const createPath = (accessor: Accessor, data?: any) => {\n  if (accessor.value) return accessor.value\n\n  const parentValue = accessor.parent && createPath(accessor.parent)\n  const nodeImplementation = getAbstractImplementation(accessor.node, data?.__typename)\n  const value = createValue(nodeImplementation || accessor.node, data)\n\n  if (parentValue) {\n    parentValue!.set(accessor.toString(), value)\n  }\n\n  return value\n}\n","let currentTransaction: Transaction | undefined\n\nexport class Transaction {\n  private callbacks = new Set<Function>()\n\n  public begin() {\n    if (currentTransaction) return\n    currentTransaction = this\n  }\n\n  public end() {\n    if (currentTransaction !== this) return\n    currentTransaction = undefined\n    this.flush()\n  }\n\n  private flush() {\n    const callbacks = Array.from(this.callbacks)\n    this.callbacks.clear()\n\n    callbacks.forEach(callback => callback())\n  }\n\n  public onComplete(callback: Function) {\n    this.callbacks.add(callback)\n  }\n}\n\nexport const afterTransaction = (callback: Function) => {\n  if (currentTransaction) {\n    currentTransaction.onComplete(callback)\n    return\n  }\n\n  callback()\n}\n","import { Accessor } from '../Accessor'\nimport { Value } from './Value'\nimport { deepReference, createPath } from './utils'\nimport { merge } from './merge'\nimport { ObjectNode, DataTrait } from '../Node'\nimport { NodeEntry } from './NodeEntry'\nimport { Disposable } from '../utils'\nimport { createEvent } from '@gqless/utils'\nimport { Transaction } from './Transaction'\n\nexport class Cache extends Disposable {\n  public references!: ReturnType<typeof deepReference>\n  public entries = new Map<DataTrait, NodeEntry>()\n\n  public onRootValueChange = createEvent<(rootValue: Value) => void>()\n\n  constructor(node: ObjectNode) {\n    super()\n\n    this.onRootValueChange.listen(() => {\n      if (this.references) this.references.dispose()\n\n      this.references = deepReference(this.rootValue)\n\n      const addToEntries = (value: Value) => {\n        if (!this.entries.has(value.node))\n          this.entries.set(value.node, new NodeEntry(value.node))\n        const graphNode = this.entries.get(value.node)!\n\n        if (graphNode.instances.has(value)) return\n\n        graphNode.instances.add(value)\n      }\n\n      addToEntries(this.rootValue)\n      this.references.onReference.listen(addToEntries)\n      this.references.onUnreference.listen(value => {\n        if (!this.entries.has(value.node)) return\n        const graphNode = this.entries.get(value.node)!\n\n        graphNode.instances.delete(value)\n      })\n    })\n\n    this.rootValue = new Value(node)\n  }\n\n  private _rootValue!: Value\n  public get rootValue() {\n    return this._rootValue\n  }\n  public set rootValue(value: Value) {\n    const prevValue = this._rootValue\n    if (value === prevValue) return\n    this._rootValue = value\n    this.onRootValueChange.emit(value)\n  }\n\n  public merge(accessor: Accessor, data: any) {\n    const transaction = new Transaction()\n\n    transaction.begin()\n    const value = createPath(accessor, data)\n    merge(this, value, data, accessor.extensions)\n    transaction.end()\n  }\n\n  public toJSON(deep = true) {\n    const types: any = {}\n\n    this.entries.forEach(nodeEntry => {\n      types[nodeEntry.node.toString()] =\n        deep === true ? nodeEntry.toJSON() : nodeEntry\n    })\n\n    return {\n      data: deep === true ? this.rootValue.toJSON() : this.rootValue,\n      types,\n    }\n  }\n\n  public dispose() {\n    super.dispose()\n    this.references.dispose()\n  }\n}\n","import { Plugin, PluginMethod } from './Plugin'\n\ntype ComposablePlugin = (plugin: Plugin[]) => Plugin[]\n\nexport class Plugins {\n  private plugins: Plugin[] = []\n\n  public add(...plugins: Plugin[]): void\n  public add(plugin: ComposablePlugin): void\n\n  public add(...args: any[]) {\n    if (args.length === 1 && typeof args[0] === 'function') {\n      const plugin: ComposablePlugin = args[0]\n      this.plugins = plugin(this.plugins)\n    } else {\n      this.plugins.push(...(args as Plugin[]))\n    }\n  }\n\n  public remove(...plugins: Plugin[]) {\n    plugins.forEach(plugin => {\n      const idx = this.plugins.indexOf(plugin)\n\n      if (idx > -1) {\n        this.plugins.splice(idx, 1)\n      }\n    })\n  }\n\n  public all = new Proxy<\n    {\n      [K in keyof Plugin]-?: (\n        ...args: Parameters<PluginMethod<K>>\n      ) => ReturnType<PluginMethod<K>>[]\n    }\n  >({} as any, {\n    get: (_, key: keyof Plugin) => (...args: any[]) => {\n      return this.plugins\n        .filter(plugin => key in plugin)\n        .map(plugin => (plugin[key] as Function)(...args))\n    },\n  })\n\n  public first = new Proxy<\n    {\n      [K in keyof Plugin]-?: (\n        ...args: Parameters<PluginMethod<K>>\n      ) => (\n        isCorrectValue: (value: ReturnType<PluginMethod<K>>) => boolean\n      ) => ReturnType<PluginMethod<K>>\n    }\n  >({} as any, {\n    get: (_, key: keyof Plugin) => (...args: any[]) => (\n      isCorrectValue: (value: any) => boolean\n    ) => {\n      for (const plugin of this.plugins.filter(plugin => key in plugin)) {\n        const value = (plugin[key] as Function)(...args)\n        if (isCorrectValue(value)) return value\n      }\n    },\n  })\n}\n","interface Weight {\n  amount: number\n  count: number\n  priority?: number\n}\n\n/**\n * This algorithmn take a stack of queries, and determines\n * what query each stack should use\n * eg.\n *  [App, Profile] => Profile\n *  [App, Profile, Name] => Profile\n *  [App, Navbar] => App\n *  [App, Profile, Name] => App\n * I'm sure this could be optimized further but it was a pain to get working\n */\nexport const queriesFromStacks = <T extends any>(stacks: T[][]) => {\n  const queryWeights = new Map<T, Weight>()\n\n  const getWeights = (query: T) => {\n    if (queryWeights.has(query)) {\n      return queryWeights.get(query)!\n    }\n\n    const weights: Weight = { amount: 0, count: 0 }\n    queryWeights.set(query, weights)\n    return weights\n  }\n\n  // Iterate stacks and caculate weights\n  stacks.forEach(stack => {\n    stack.forEach((query, i) => {\n      const amount = stack.length - i\n\n      const weights = getWeights(query)\n      weights.count++\n      weights.amount += amount\n    })\n  })\n\n  // Calculate priority\n  const sortedWeights = Array.from(queryWeights).sort(\n    ([, a], [, b]) => b.count - a.count || b.amount - a.amount\n  )\n\n  // Calculate query priorities\n  sortedWeights.forEach(([_, weight], idx) => {\n    if (idx > 0) {\n      const prevWeight = sortedWeights[idx - 1][1]\n\n      if (\n        weight.amount / weight.count ===\n        prevWeight.amount / prevWeight.count\n      ) {\n        weight.priority = prevWeight.priority\n        return\n      }\n    }\n\n    weight.priority = idx\n  })\n\n  const finalQueries = new Set()\n  const queriesCount = new Map()\n\n  const possibleQueries = stacks.map(stack => {\n    let lowestRating: number | undefined\n    let possibleQueries: T[] = []\n\n    const stackSize = stack.length - 1\n    // Iterate in reverse, as the best possible query\n    // is most likely to be at the end\n    for (let i = stackSize; i >= 0; i--) {\n      const query = stack[i]\n      const { priority } = queryWeights.get(query)!\n      const positionRating = stackSize - i\n\n      // If the positionRating is greater\n      // than the lowest recorded rating, then we've already found it\n      if (lowestRating !== undefined && positionRating > lowestRating) break\n\n      const rating = priority! + positionRating\n\n      if (lowestRating === undefined || rating <= lowestRating) {\n        // If it's the same rating, add to possible queries\n        if (lowestRating === undefined || rating === lowestRating) {\n          possibleQueries.push(query)\n        } else {\n          lowestRating = rating\n          possibleQueries = [query]\n        }\n      }\n    }\n\n    if (possibleQueries.length === 1) {\n      finalQueries.add(possibleQueries[0])\n    } else {\n      possibleQueries.forEach(query => {\n        queriesCount.set(query, (queriesCount.get(query) || 0) + 1)\n      })\n    }\n\n    return possibleQueries\n  })\n\n  // Works for 80% of cases, but it depends on the order the entries are passed in\n  return possibleQueries.map(possibleQueries => {\n    let highestCount: number | undefined\n    let chosenQuery: T | undefined\n\n    for (const query of possibleQueries) {\n      if (finalQueries.has(query)) return query\n      const count = queriesCount.get(query)\n\n      if (highestCount === undefined || count > highestCount) {\n        highestCount = count\n        chosenQuery = query\n      }\n    }\n\n    finalQueries.add(chosenQuery)\n\n    return chosenQuery!\n  })\n}\n","export class Query {\n  static instances = new Map<string | undefined, Query>()\n\n  constructor(\n    public name?: string,\n    /**\n     * By default, queries with the same name\n     * will refer to the same query.\n     * Set this to true to disable\n     */\n    unique?: boolean\n  ) {\n    if (Query.instances.has(name)) {\n      if (!unique) return Query.instances.get(name)!\n    } else {\n      Query.instances.set(name, this)\n    }\n  }\n\n  public toString() {\n    return this.name || '(unnamed)'\n  }\n}\n","import { Plugins } from '../Plugin'\nimport { Accessor, NetworkStatus } from '../Accessor'\nimport { Disposable } from '../utils'\nimport { queriesFromStacks } from './queriesFromStacks'\nimport { Query } from './Query'\nimport { createEvent } from '@gqless/utils'\n\nconst defaultQuery = new Query()\n\nexport class Commit extends Disposable {\n  public onActive = createEvent()\n  public onIdle = createEvent()\n\n  public onFetched = createEvent()\n  public accessors = new Map<Accessor, Query[]>()\n\n  constructor(\n    private plugins: Plugins,\n    private stack: Query[],\n    private fetchAccessors: (\n      accessors: Accessor<any>[],\n      queryName?: string\n    ) => any\n  ) {\n    super()\n  }\n\n  public stageUntilValue(accessor: Accessor) {\n    if (!accessor.resolved) return\n    if (accessor.value) return\n\n    const unstage = this.stage(accessor)\n\n    this.addDisposer(\n      accessor.onValueChange.then(unstage),\n      accessor.onResolvedChange.then(resolved => {\n        if (!resolved) unstage()\n      })\n    )\n\n    return unstage\n  }\n\n  public stage(accessor: Accessor, ...queries: Query[]) {\n    const unstage = () => this.unstage(accessor)\n\n    // If the accessor is in this current commit,\n    // or being (re-)fetched from a previous commit, don't re-fetch it\n    if (this.disposed || accessor.status !== NetworkStatus.idle) return unstage\n\n    if (!this.accessors.size) this.onActive.emit()\n\n    accessor.status = accessor.value\n      ? NetworkStatus.updating\n      : NetworkStatus.loading\n\n    this.accessors.set(accessor, [...this.stack, ...queries])\n\n    // If we already have the parent, remove the\n    // parent to narrow down the accessors. This is used when a accessor is created\n    // this could cause issues later, may need to add a recurse field to handle polling etc.\n    if (accessor.parent && this.accessors.has(accessor.parent)) {\n      this.unstage(accessor.parent)\n    }\n\n    return unstage\n  }\n\n  public unstage(accessor: Accessor) {\n    if (this.disposed) return\n\n    // Only if the accessor is in our commits, set it as not fetching\n    // otherwise it could be from a previous commit\n    if (this.accessors.has(accessor)) {\n      accessor.status = NetworkStatus.idle\n    }\n\n    this.accessors.delete(accessor)\n\n    if (!this.accessors.size) this.onIdle.emit()\n  }\n\n  public async fetch() {\n    if (!this.accessors.size) return\n    const accessors = Array.from(this.accessors.keys())\n    const stacks = Array.from(this.accessors.values())\n    const stackQueries = queriesFromStacks(stacks)\n\n    const queries = new Map<Query | undefined, Accessor[]>()\n\n    // Iterate over stacks and convert into query map\n    stackQueries.forEach((query, idx) => {\n      if (query === undefined) {\n        stackQueries[idx] = query = defaultQuery\n      }\n\n      const accessor = accessors[idx]\n\n      if (queries.has(query)) {\n        const accessors = queries.get(query)!\n        accessors.push(accessor)\n        return\n      }\n\n      queries.set(query, [accessor])\n    })\n\n    this.plugins.all.onCommit({ stacks, stackQueries, accessors, queries })\n\n    try {\n      const promises = Array.from(queries)\n        .map(async ([query, accessors]) => {\n          const promise = this.fetchAccessors(accessors, query && query.name)\n\n          try {\n            await promise\n          } finally {\n            accessors.forEach(accessor => {\n              accessor.status = NetworkStatus.idle\n            })\n          }\n        })\n        .filter(Boolean) as Promise<any>[]\n\n      await Promise.all(promises)\n    } catch (e) {\n      console.error(e)\n    }\n\n    this.onFetched.emit()\n  }\n}\n","import { invariant } from '@gqless/utils'\n\nimport { Plugins } from '../Plugin'\nimport { Disposable } from '../utils'\nimport { Commit } from './Commit'\nimport { Query } from './Query'\nimport { Accessor } from '../Accessor'\n\nexport type AccessorFetcher = (accessors: Accessor[], queryName?: string) => any\n\nexport class Scheduler extends Disposable {\n  private timer: any\n\n  public stack: Query[] = []\n  public commit: Commit = undefined!\n\n  constructor(\n    private fetchAccessors: AccessorFetcher,\n    public plugins: Plugins = new Plugins(),\n    public interval = 50 + (__DEV__ ? 100 : 0)\n  ) {\n    super()\n\n    this.startTimer()\n    this.addDisposer(this.clearTimer)\n  }\n\n  public pushStack(...queries: Query[]) {\n    this.stack.push(...queries)\n  }\n\n  public popStack(...queries: Query[]) {\n    for (let i = queries.length - 1; i >= 0; i--) {\n      const query = queries[i]\n      const idx = this.stack.length - 1\n\n      invariant(\n        this.stack[idx] === query,\n        `Scheduler#popStack called with '${query}', but not last in stack [${this.stack.join(\n          ', '\n        )}]`\n      )\n\n      this.stack.splice(idx, 1)\n    }\n  }\n\n  private startTimer() {\n    this.clearTimer()\n\n    // Don't create new Commit, if prev one unused\n    if (!this.commit || this.commit.accessors.size) {\n      if (this.commit) this.commit.dispose()\n\n      this.commit = new Commit(this.plugins, this.stack, this.fetchAccessors)\n    }\n\n    const { commit } = this\n    commit.onActive.then(() => {\n      this.timer = setTimeout(() => {\n        commit.fetch()\n        this.startTimer()\n      }, this.interval)\n\n      commit.onIdle.then(() => {\n        if (commit !== this.commit) return\n\n        // Cancel timer, and wait until commit is active again\n        this.startTimer()\n      })\n    })\n  }\n\n  private clearTimer() {\n    clearTimeout(this.timer)\n  }\n}\n","import { Accessor } from '../Accessor'\nimport { EnumNode, ScalarNode } from '../../Node'\nimport { createEvent } from '@gqless/utils'\nimport { Value } from '../../Cache'\n\n// When value of accessor changes\n// & types are different -> emit\nexport const onDataChange = (accessor: Accessor) => {\n  const onDataChange = createEvent<(prevData: any) => void>()\n\n  let dispose: Function | undefined\n\n  const onValueAssociated = (\n    value: Value | undefined,\n    prevValue: Value | undefined\n  ) => {\n    dispose?.()\n    dispose = undefined\n\n    // Hook for onDataUpdate event\n    const check = () => {\n      const newData = value?.data\n      const prevData = prevValue?.data\n      if (newData === prevData) return\n\n      if (\n        prevData !== undefined ||\n        newData === null ||\n        accessor.node instanceof ScalarNode ||\n        accessor.node instanceof EnumNode\n      ) {\n        onDataChange.emit(prevData)\n      }\n    }\n\n    if (!value) {\n      check()\n      return\n    }\n\n    dispose = value.onChange.listen(check)\n    check()\n  }\n\n  accessor.addDisposer(accessor.onValueChange.listen(onValueAssociated))\n  onValueAssociated(undefined, accessor.value)\n\n  return onDataChange\n}\n","import { Accessor } from '../Accessor'\nimport { Value } from '../../Cache'\n\nexport const syncValue = (\n  accessor: Accessor,\n\n  getFromValue: ((accessorValue: Value) => Value | undefined) | string,\n  withAccessor = accessor.parent\n) => {\n  if (!withAccessor) return\n\n  const isFn = typeof getFromValue === 'function'\n\n  const getValue = (value: Value): Value | undefined => {\n    if (isFn) return (getFromValue as Function)(value)\n\n    return value.get(getFromValue as string)\n  }\n\n  let dispose: Function | undefined\n  const associateValue = () => {\n    if (dispose) {\n      accessor.deleteDiposer(dispose)\n      dispose()\n      dispose = undefined\n    }\n\n    if (withAccessor.value) {\n      accessor.value = getValue(withAccessor.value)\n\n      const onChange = isFn\n        ? withAccessor.value.onChange\n        : withAccessor.value.onSet.filter(k => k === getFromValue)\n\n      dispose = onChange.listen(() => {\n        accessor.value = getValue(withAccessor.value!)\n      })\n      accessor.addDisposer(dispose)\n\n      return\n    }\n\n    accessor.value = undefined\n  }\n\n  accessor.addDisposer(withAccessor.onValueChange.listen(associateValue))\n  associateValue()\n}\n","import { createEvent } from '@gqless/utils'\nimport { Accessor } from './Accessor'\n\nexport type AccessorInterceptor = (accessor: Accessor) => void\nexport const accessorInterceptors = new Set<AccessorInterceptor>()\n\nexport class Interceptor {\n  public listening = false\n\n  public onAccessor = createEvent<AccessorInterceptor>()\n\n  public start() {\n    accessorInterceptors.add(this.onAccessor.emit)\n    this.listening = true\n  }\n\n  public stop() {\n    accessorInterceptors.delete(this.onAccessor.emit)\n    this.listening = false\n  }\n}\n","import { computed, createEvent, invariant, createMemo } from '@gqless/utils'\n\nimport { Cache, Value, afterTransaction } from '../Cache'\nimport {\n  ObjectNode,\n  Abstract,\n  DataTrait,\n  ComputableExtension,\n  ComputedExtension,\n  StaticExtension,\n  DataContext,\n} from '../Node'\nimport { Scheduler, Query } from '../Scheduler'\nimport { Selection, Fragment } from '../Selection'\nimport { Disposable, PathArray, arrayEqual } from '../utils'\nimport { onDataChange } from './utils'\nimport { FragmentAccessor } from '.'\nimport { accessorInterceptors } from '../Interceptor'\n\nexport enum NetworkStatus {\n  idle,\n  loading,\n  updating,\n}\n\nexport const ACCESSOR = Symbol()\n// A query was made with minimal fields on it\n// to save bandwidth - predicted the IDs would match up\n// But returned ID were different, so refetch everything\nconst KEYED_REFETCH = new Query('KeyedRefetch')\n\nconst memoized = createMemo()\n\nexport abstract class Accessor<\n  TSelection extends Selection = Selection,\n  TChildren extends Accessor<Selection, any> = Accessor<Selection, any>\n> extends Disposable {\n  // Ordered by most important -> least\n  public extensions: (StaticExtension | ComputedExtension)[] = []\n  public children: TChildren[] = []\n\n  public scheduler: Scheduler = this.parent\n    ? (this.parent as any).scheduler\n    : undefined!\n  public cache: Cache = this.parent ? (this.parent as any).cache : undefined!\n  // replaces refs of this accessor, with a Fragment\n  // see FragmentAccessor#startResolving\n\n  public fragmentToResolve?: FragmentAccessor\n  protected _data: any\n  protected _status: NetworkStatus = NetworkStatus.idle\n  protected _value: Value | undefined\n  protected _resolved = true\n\n  public onValueChange = createEvent<\n    (value: Value | undefined, prevValue: Value | undefined) => void\n  >()\n  // Equality check only\n  public onDataChange = onDataChange(this)\n  public onResolvedChange = createEvent<(resolved: boolean) => void>()\n  public onStatusChange = createEvent<\n    (status: NetworkStatus, prevStatus: NetworkStatus) => void\n  >()\n  public onInitializeExtensions = createEvent()\n\n  constructor(\n    public readonly parent: Accessor | undefined,\n    public readonly selection: TSelection,\n    public readonly node = selection.node\n  ) {\n    super()\n\n    if (parent) {\n      parent.children.push(this)\n\n      this.addDisposer(\n        // On un-select, dispose of self\n        // used when you do `query.users()`, and an argumentless\n        // selection is created before the function call\n        parent.selection.onUnselect\n          .filter(s => s === selection)\n          .listen(() => this.dispose())\n      )\n    }\n\n    // Update the extensions change when:\n    // - data changes (from null -> object)\n    // - parent extensions change\n    this.addDisposer(\n      this.onDataChange.listen(() => {\n        this.data = undefined\n        this.loadExtensions()\n      }),\n      parent?.onInitializeExtensions.listen(() => {\n        this.loadExtensions()\n      })\n    )\n  }\n\n  public get resolved() {\n    return this._resolved\n  }\n\n  public set resolved(resolved: boolean) {\n    const prevResolved = this._resolved\n    if (prevResolved === resolved) return\n    this._resolved = resolved\n    this.onResolvedChange.emit(resolved)\n  }\n\n  public get data() {\n    if (this.fragmentToResolve) {\n      return this.fragmentToResolve.data\n    }\n\n    if (this._data === undefined) {\n      this.data = this.getData()\n    }\n\n    accessorInterceptors.forEach(intercept => intercept(this))\n\n    return this._data\n  }\n  public set data(data: any) {\n    this._data = data\n  }\n\n  public set status(status: NetworkStatus) {\n    const prevStatus = this._status\n    this._status = status\n    if (prevStatus === status) return\n    this.onStatusChange.emit(status, prevStatus)\n  }\n  public get status() {\n    return this._status\n  }\n\n  public set value(value: Value | undefined) {\n    const prevValue = this._value\n    this._value = value\n    if (prevValue === value) return\n    this.onValueChange.emit(value, prevValue)\n  }\n  public get value() {\n    return this._value\n  }\n\n  protected initializeExtensions() {\n    const addExtensions = (node: DataTrait) => {\n      let extension = node.extension\n      if (!extension) return\n\n      if (extension instanceof ComputableExtension) {\n        extension = new ComputedExtension(extension, this)\n      }\n\n      this.extensions.unshift(extension)\n    }\n\n    if (this.node instanceof Abstract) {\n      for (const node of this.node.implementations) {\n        addExtensions(node)\n      }\n    }\n\n    addExtensions(this.node)\n  }\n\n  protected loadExtensions() {\n    const prevExtensions = this.extensions\n    this.extensions = []\n    this.initializeExtensions()\n\n    if (arrayEqual(prevExtensions, this.extensions)) return\n\n    this.onInitializeExtensions.emit()\n\n    if (!this.extensions.length) return\n\n    // If already a fragment, key fragments should only be added on different types\n    const isTopLevel =\n      !(this instanceof FragmentAccessor) || this.node !== this.parent.node\n\n    if (isTopLevel) {\n      // Add keyFragments\n      this.extensions.forEach(({ fragment }) => {\n        if (!fragment) return\n        if (this.selection === (fragment as any)) return\n\n        this.selection.add(fragment, true)\n      })\n    }\n\n    if (!this.value) {\n      // TODO: Should this be here? or in merge.ts\n      // Cache redirects\n      if (this.cache.entries.has(this.node)) {\n        for (const extension of this.extensions) {\n          const value = extension.redirect(this)\n\n          if (!(value instanceof Value)) continue\n          this.updateValue(value)\n          break\n        }\n      }\n    }\n  }\n\n  // Update the value, by modifying the cache\n  public updateValue(value: Value) {\n    if (value === this.value) return\n\n    invariant(\n      this.parent?.value,\n      `can't update ${this.path} value without parent value`\n    )\n\n    const valueless = new Set(this.children.filter(a => !a.value))\n    this.parent.value.set(this.toString(), value)\n\n    afterTransaction(() => {\n      const accessorWithoutValue = this.children.find(\n        a => !a.value && !valueless.has(a)\n      )\n\n      // If a child accessor is missing a value, then\n      // re-fetch it entirely\n      if (accessorWithoutValue) {\n        this.scheduler.commit.stage(this, KEYED_REFETCH)\n      }\n    })\n  }\n\n  public getData(ctx?: DataContext): any {\n    return undefined\n  }\n\n  public setData(data: any) {\n    // @TODO\n    console.log('set', this.path.toString(), data)\n    this.cache.merge(this, data)\n  }\n\n  public get<TChild extends TChildren | FragmentAccessor>(\n    find:\n      | ((child: TChildren | FragmentAccessor) => boolean)\n      | Selection\n      | string\n      | number\n  ): TChild | undefined {\n    if (typeof find === 'function') {\n      return this.children.find(find) as any\n    }\n\n    if (find instanceof Selection) {\n      const accessor = this.children.find(c => c.selection === find) as any\n      return accessor\n    }\n\n    return this.children.find(c => c.toString() === String(find)) as any\n  }\n\n  public getDefaultFragment(node: ObjectNode) {\n    return memoized.fragment(() => {\n      const fragment = new Fragment(node)\n      this.selectionPath[this.selectionPath.length - 1].add(fragment)\n      return fragment\n    }, [node, ...this.selectionPath])\n  }\n\n  @computed\n  public get selectionPath(): Selection[] {\n    const basePath = this.parent\n      ? this.parent.selectionPath\n      : new PathArray<Selection>()\n    const path =\n      // Remove duplicated selections\n      basePath[basePath.length - 1] === this.selection\n        ? basePath\n        : new PathArray(...basePath, this.selection)\n\n    return path\n  }\n\n  @computed\n  public get path(): Accessor[] {\n    const basePath = this.parent ? this.parent.path : []\n    const path = new PathArray(...basePath, this)\n\n    return path\n  }\n\n  public dispose() {\n    super.dispose()\n\n    if (this.parent) {\n      const idx = this.parent.children.indexOf(this)\n      if (idx !== -1) {\n        this.parent.children.splice(idx, 1)\n      }\n\n      this.scheduler.commit.unstage(this)\n\n      this.scheduler.commit.accessors.forEach((_, accessor) => {\n        // if the accessor begins with this.path\n        for (let i = 0; i < this.path.length; i++) {\n          if (this.path[i] !== accessor.path[i]) return\n        }\n\n        this.scheduler.commit.unstage(accessor)\n      })\n    }\n  }\n}\n","import { FieldSelection } from '../Selection'\nimport { Accessor } from './Accessor'\nimport { syncValue } from './utils'\nimport {\n  ComputableExtension,\n  ComputedExtension,\n  DataTrait,\n  DataContext,\n} from '../Node'\n\nexport class FieldAccessor<\n  TFieldSelection extends FieldSelection<any> = FieldSelection<any>,\n  TChildren extends Accessor = Accessor\n> extends Accessor<TFieldSelection, TChildren> {\n  protected _resolved = this.parent.resolved\n\n  constructor(public parent: Accessor, fieldSelection: TFieldSelection) {\n    super(parent, fieldSelection)\n\n    this.parent.onResolvedChange.listen(resolved => (this.resolved = resolved))\n    syncValue(this, this.toString())\n    this.loadExtensions()\n    this.scheduler.commit.stageUntilValue(this)\n  }\n\n  protected initializeExtensions() {\n    super.initializeExtensions()\n\n    for (let i = this.parent.extensions.length - 1; i >= 0; --i) {\n      let extension = this.parent.extensions[i].childField(this.selection.field)\n      if (!extension) continue\n\n      if (extension instanceof ComputableExtension) {\n        extension = new ComputedExtension(extension, this)\n      }\n\n      this.extensions.unshift(extension)\n    }\n  }\n\n  public getData(ctx?: DataContext): any {\n    return (this.selection.field.ofNode as DataTrait).getData({\n      accessor: this,\n      ...ctx,\n    })\n  }\n\n  public toString() {\n    return this.selection.toString()\n  }\n}\n","import { Fragment } from '../Selection'\nimport { Accessor } from './Accessor'\nimport { syncValue } from './utils'\nimport { DataContext } from '../Node'\n\nexport class FragmentAccessor<\n  TFragment extends Fragment = Fragment,\n  TChildren extends Accessor = Accessor\n> extends Accessor<TFragment, TChildren> {\n  protected _resolved =\n    this.parent!.resolved &&\n    (!this.parent!.value || this.parent!.value.node === this.selection.node)\n\n  constructor(public parent: Accessor, fragment: TFragment) {\n    super(parent, fragment)\n\n    if (fragment.node !== parent.node) {\n      this.parent.onValueChange.listen(value => {\n        this.resolved =\n          this.parent.resolved && (!value || value.node === fragment.node)\n      })\n    }\n\n    // Sync value with parent\n    // (only if the node is the same)\n    syncValue(this, value => (value.node === fragment.node ? value : undefined))\n    this.loadExtensions()\n  }\n\n  /**\n   * Makes the parent temporarily return\n   * this accessor's data\n   */\n  public startResolving() {\n    const originalAccessor = this.parent.fragmentToResolve\n    this.parent.fragmentToResolve = this\n    const resetAccessor = () => {\n      this.parent.fragmentToResolve = originalAccessor\n      removeDisposer()\n    }\n    const removeDisposer = this.addDisposer(resetAccessor)\n    return resetAccessor\n  }\n\n  protected initializeExtensions() {\n    // Copy extensions from parent\n    for (let i = this.parent.extensions.length - 1; i >= 0; --i) {\n      const extension = this.parent.extensions[i]\n      if (extension.node !== this.selection.node) continue\n\n      this.extensions.unshift(extension)\n    }\n  }\n\n  public getData(ctx?: DataContext): any {\n    return this.selection.node.getData({\n      accessor: this,\n      ...ctx,\n    })\n  }\n\n  public toString() {\n    return this.selection.toString()\n  }\n}\n","import {\n  ArrayNode,\n  ComputableExtension,\n  ComputedExtension,\n  DataTrait,\n  DataContext,\n} from '../Node'\nimport { Selection } from '../Selection'\nimport { Accessor } from './Accessor'\nimport { syncValue } from './utils'\n\nexport class IndexAccessor<\n  TSelectionArray extends Selection<ArrayNode<any>> = Selection<ArrayNode<any>>,\n  TChildren extends Accessor = Accessor\n> extends Accessor<TSelectionArray, TChildren> {\n  protected _resolved = this.parent.resolved\n\n  constructor(public parent: Accessor<TSelectionArray>, public index: number) {\n    super(\n      parent,\n      parent.selection,\n      (parent instanceof IndexAccessor\n        ? (parent.node as ArrayNode<any>)\n        : parent.selection.node\n      ).ofNode\n    )\n\n    // Sync from parent status\n    this.addDisposer(\n      this.parent.onStatusChange.listen(status => {\n        this.status = status\n      })\n    )\n\n    this.parent.onResolvedChange.listen(resolved => (this.resolved = resolved))\n    syncValue(this, this.toString())\n    this.loadExtensions()\n    this.scheduler.commit.stageUntilValue(this)\n  }\n\n  protected initializeExtensions() {\n    super.initializeExtensions()\n\n    for (let i = this.parent.extensions.length - 1; i >= 0; --i) {\n      let extension = this.parent.extensions[i].childIndex()\n      if (!extension) continue\n\n      if (extension instanceof ComputableExtension) {\n        extension = new ComputedExtension(extension, this)\n      }\n\n      this.extensions.unshift(extension)\n    }\n  }\n\n  public getData(ctx?: DataContext): any {\n    return (this.selection.node.ofNode as DataTrait).getData({\n      accessor: this,\n      ...ctx,\n    })\n  }\n\n  public toString() {\n    return `${this.index}`\n  }\n}\n","import { Cache, Value } from '../Cache'\nimport { ObjectNode, DataContext } from '../Node'\nimport { Scheduler } from '../Scheduler'\nimport { Selection } from '../Selection'\nimport { Accessor } from './Accessor'\n\nexport class RootAccessor<\n  TSelection extends Selection<ObjectNode> = Selection<ObjectNode>,\n  TChildren extends Accessor = Accessor\n> extends Accessor<TSelection, TChildren> {\n  constructor(\n    selection: TSelection,\n    public scheduler: Scheduler,\n    public cache: Cache = new Cache(selection.node)\n  ) {\n    super(undefined, selection)\n    this.value = cache.rootValue\n\n    this.addDisposer(\n      cache.onRootValueChange.listen(() => (this.value = cache.rootValue))\n    )\n\n    this.loadExtensions()\n  }\n\n  // TODO: This should be replace with a Generic inside accessor\n\n  public getData(ctx?: DataContext): any {\n    return this.selection.node.getData({\n      accessor: this,\n      ...ctx,\n    })\n  }\n\n  public updateValue(value: Value) {\n    this.cache.rootValue = value\n  }\n\n  public toString() {\n    return this.selection.toString()\n  }\n}\n","import { invariant } from '@gqless/utils'\n\nimport { Interceptor } from '../Interceptor'\nimport { ACCESSOR, Accessor } from './Accessor'\n\nlet lastAccessor: Accessor | null\nlet timer: number\n\nconst interceptor = new Interceptor()\ninterceptor.onAccessor.listen(accessor => {\n  lastAccessor = accessor\n\n  clearTimeout(timer)\n  timer = setTimeout(() => {\n    lastAccessor = null\n  })\n})\ninterceptor.start()\n\nexport const getAccessor = (input: any): Accessor => {\n  if (input) {\n    // Attempt to lookup symbol\n    const accessor = input[ACCESSOR]\n    if (accessor) return accessor\n\n    // Support passing accessor directly\n    if (input instanceof Accessor) return input\n  }\n\n  // If a microtask has run since the last referenced\n  // accessor was recorded, then it could be subject\n  // to race conditions\n  invariant(\n    lastAccessor !== null,\n    lastAccessorErrorMessage(\n      `microtask occurred since last accessor was intercepted`\n    )\n  )\n\n  invariant(\n    lastAccessor,\n    lastAccessorErrorMessage(`no accessors have been referenced yet!`)\n  )\n\n  // Check to see if lastAccessor is the same value as\n  // input. If it is, then return it\n  const data = lastAccessor.data\n\n  invariant(\n    data === input,\n    lastAccessorErrorMessage(\n      `'${input}' not equal to '${lastAccessor.path}' (last referenced accessor)`\n    )\n  )\n\n  return lastAccessor\n}\n\nconst lastAccessorErrorMessage = (message: string) =>\n  `Indeterminate accessor! ${message}\\n\\n` +\n  `Ensure calls to getAccessor() *always* dereference data inside the call\\n\\n` +\n  `GOOD : \\`getAccessor(user.name)\\`\\n` +\n  `BAD  : \\`getAccessor(name)\\`\\n`\n","import { ScalarNode, ArrayNode, UnionNode, EnumNode } from '../../'\nimport { lazyGetters } from '@gqless/utils'\nimport { FieldNode } from './FieldNode'\nimport { NodeExtension } from '../../Extension'\nimport { ObjectNode } from '../../ObjectNode'\nimport { InterfaceNode } from '../../InterfaceNode'\n\nexport type IFieldsNodeOptions = {\n  name: string\n  extension?: NodeExtension\n}\n\nexport type UFieldsNode =\n  | ObjectNode\n  | InterfaceNode\n  | UnionNode\n  | ArrayNode\n  | ScalarNode\n  | EnumNode\n\nexport type UFieldsNodeRecord = Record<string, FieldNode<UFieldsNode>>\n\nexport class FieldsNode {\n  public name: string\n  public fields: UFieldsNodeRecord\n\n  constructor(fields: UFieldsNodeRecord, { name }: IFieldsNodeOptions) {\n    this.name = name\n    this.fields = lazyGetters(fields, (fieldName, field) => {\n      // Called when the getter prop is evaluated\n      field.name = fieldName as string\n    })\n  }\n\n  public toString() {\n    return this.name\n  }\n}\n","import { StaticExtension, ComputableExtension, Extension } from '../Extension'\nimport { Accessor } from '../../Accessor'\nimport { Selection } from '../../Selection'\nimport { Value } from '../../Cache'\nimport { accessorInterceptors } from '../../Interceptor'\n\nexport type DataContext<TNode extends DataTrait = DataTrait> = {\n  accessor?: Accessor<Selection<TNode>>\n  selection?: Selection<TNode>\n  extensions?: Extension[]\n  value?: Value\n}\n\nexport const interceptAccessor = (ctx: DataContext) => {\n  if (!ctx.accessor) return\n\n  accessorInterceptors.forEach(intercept => intercept(ctx.accessor!))\n}\n\nexport const getExtensions = (ctx: DataContext) => {\n  if (ctx.extensions) return ctx.extensions\n  if (ctx.accessor) return ctx.accessor.extensions\n\n  return []\n}\n\nexport const getSelection = (ctx: DataContext) => {\n  if (ctx.selection) return ctx.selection\n  if (ctx.accessor) return ctx.accessor.selection\n\n  return\n}\n\nexport const getValue = (ctx: DataContext) => {\n  if (ctx.value) return ctx.value\n  if (ctx.accessor) return ctx.accessor.value\n\n  return\n}\n\nexport interface DataTrait {\n  extension?: StaticExtension | ComputableExtension\n  getData(ctx: DataContext): any\n}\n","import { DataTrait, DataContext, getValue, interceptAccessor } from './traits'\n\nexport type IEnumNodeOptions = {\n  name?: string\n}\n\nexport class EnumNode implements DataTrait {\n  public name?: string\n\n  constructor({ name }: IEnumNodeOptions = {}) {\n    this.name = name\n  }\n\n  public toString() {\n    return this.name || this.constructor.name\n  }\n\n  public getData(ctx: DataContext<EnumNode>): any {\n    interceptAccessor(ctx)\n\n    const value = getValue(ctx)\n    if (!value) return null\n\n    return value.data\n  }\n}\n","import { deepJSONEqual } from '../../utils'\nimport { Value } from '../../Cache'\n\nexport const REDIRECT = Symbol()\nexport const INDEX = Symbol()\n\nexport const GET_KEY = Symbol()\nexport const keyIsValid = (key: unknown) => key != null\nexport const keyIsEqual = (a: unknown, b: unknown) => deepJSONEqual(a, b)\n\nexport type RedirectHelpers = {\n  instances: Set<Value>\n  match(data: any): Value | undefined\n  getByKey<TKey = unknown>(key: TKey): Value | undefined\n}\n\nexport interface ProxyExtension<TData extends object = object> {\n  [key: string]: any\n\n  [REDIRECT]?(\n    args: Record<string, any> | undefined,\n    helpers: RedirectHelpers\n  ): Value | undefined\n\n  [GET_KEY]?(data: TData): any\n}\n\nexport interface ArrayNodeExtension<TArray extends unknown[] = unknown[]>\n  extends ProxyExtension<TArray> {\n  [INDEX]?: NodeExtension<TArray[number]>\n  [GET_KEY]?(data: TArray[number]): any\n}\n\nexport type ObjectNodeExtension<TObject extends {} = {}> = ProxyExtension<\n  TObject\n> &\n  { [K in keyof TObject]?: NodeExtension<TObject[K]> }\n\nexport type ScalarNodeExtension<TData extends unknown = unknown> = TData\n\nexport type UNodeExtension<TData = unknown> = TData extends object\n  ? TData extends any[]\n    ? ArrayNodeExtension<TData>\n    : ObjectNodeExtension<TData>\n  : ScalarNodeExtension<TData>\n\nexport type NodeExtension<TData = any> =\n  | UNodeExtension<TData>\n  | ((data: TData) => UNodeExtension<TData>)\n","import { DataTrait } from '../traits'\nimport { StaticExtension, ComputableExtension } from '.'\nimport { Extension } from './Extension'\n\nexport const createExtension = (\n  node: DataTrait,\n  extension: any,\n  parent?: Extension,\n  keyedBy?: any\n): ComputableExtension | StaticExtension =>\n  new (typeof extension === 'function' ? ComputableExtension : StaticExtension)(\n    parent,\n    node,\n    extension,\n    keyedBy\n  )\n","import { NodeContainer, FieldsNode, FieldNode } from '../abstract'\nimport {\n  ProxyExtension,\n  GET_KEY,\n  ArrayNodeExtension,\n  INDEX,\n  ObjectNodeExtension,\n  REDIRECT,\n} from './NodeExtension'\nimport { PathArray } from '../../utils'\nimport { UFragment, Fragment } from '../../Selection'\nimport { computed, createMemo, invariant } from '@gqless/utils'\nimport { DataTrait } from '../traits'\nimport { ArrayNode } from '../ArrayNode'\nimport { createExtension } from './createExtension'\nimport { Accessor, FieldAccessor } from '../../Accessor'\nimport { Value } from '../../Cache'\n\nconst memo = createMemo()\n\nexport abstract class Extension {\n  public data: any\n\n  constructor(\n    public parent: Extension | undefined,\n    public node: DataTrait,\n    /** (optional) An object used to construct fragmentKey */\n    private fragmentKeyedBy: any = parent ? undefined : node\n  ) {}\n\n  @computed\n  /** A unique key to share instances of a Fragment between extensions */\n  protected get fragmentKey() {\n    return this.path.map(ref => ref.fragmentKeyedBy).filter(Boolean)\n  }\n\n  @computed\n  public get fragment() {\n    const getKey = (this.data as ProxyExtension)?.[GET_KEY]\n    if (!getKey) return\n\n    let node = this.fragmentKey[this.fragmentKey.length - 1]\n    if (node instanceof NodeContainer) {\n      node = node.innerNode as DataTrait\n    }\n\n    // Fragments only work with InterfaceNode / ObjectNode\n    if (!(node instanceof FieldsNode)) return\n\n    return memo.fragment(() => {\n      const fragment = new Fragment(\n        node as UFragment,\n        `Keyed${this.fragmentKey.join('_')}`\n      )\n\n      // Initialize with selections\n      const data = node!.getData({ selection: fragment })\n      getKey(data)\n\n      return fragment\n    }, this.fragmentKey)\n  }\n\n  public get isKeyable() {\n    return !!(this.data as ProxyExtension)?.[GET_KEY]\n  }\n\n  public getKey(value: Value) {\n    const getKey = (this.data as ProxyExtension)?.[GET_KEY]\n    if (!getKey) return\n    const data = value.node.getData({ value })\n    const key = getKey(data)\n\n    return key\n  }\n\n  public redirect(accessor: Accessor) {\n    const redirect = (this.data as ProxyExtension)?.[REDIRECT]\n    if (!redirect) return\n\n    const entry = accessor.cache.entries.get(accessor.node)\n    if (!entry) return\n\n    return redirect(\n      accessor instanceof FieldAccessor\n        ? // @TODO: toJSON everything (could be variables)\n          accessor.selection.args\n        : undefined,\n      {\n        instances: entry.instances,\n        match(data) {\n          return entry.match(data)?.value\n        },\n        getByKey(key) {\n          return entry.getByKey(key)\n        },\n      }\n    )\n  }\n\n  /** Returns a memoized child Extension */\n  public childIndex(): Extension | undefined {\n    return memo.childIndex(() => {\n      invariant(this.node instanceof ArrayNode)\n\n      const indexExtension = (this.data as ArrayNodeExtension)?.[INDEX]\n      if (indexExtension === undefined) return\n      return createExtension(this.node.ofNode, indexExtension, this)\n    }, [this])\n  }\n\n  /** Returns a memoized child Extension, for a given field */\n  public childField(field: FieldNode): Extension | undefined {\n    return memo.childField(() => {\n      invariant(this.node instanceof FieldsNode)\n\n      const fieldExtension = (this.data as ObjectNodeExtension)?.[field.name]\n      if (fieldExtension === undefined) return\n      return createExtension(field.ofNode, fieldExtension, this, field)\n    }, [this, field])\n  }\n\n  public toString() {\n    return this.fragmentKey.toString()\n  }\n\n  @computed\n  public get path(): Extension[] {\n    const basePath = this.parent ? this.parent.path : []\n    const path = new PathArray(...basePath, this)\n\n    return path\n  }\n}\n","import { Extension } from './Extension'\nimport { UNodeExtension } from './NodeExtension'\nimport { DataTrait } from '../traits'\nimport { computed } from '@gqless/utils'\n\nexport class ComputableExtension extends Extension {\n  constructor(\n    parent: Extension | undefined,\n    node: DataTrait,\n    public getData: (data: any) => UNodeExtension,\n    keyedBy?: any\n  ) {\n    super(parent, node, keyedBy)\n  }\n\n  @computed\n  public get data() {\n    // TODO: (Optimization) Could instead return data from an instance of ComputedExtension\n    // if available. ChildField could then return already-computed instances\n    return this.getData(null)\n  }\n}\n","import { Extension } from './Extension'\nimport { UNodeExtension } from './NodeExtension'\nimport { DataTrait } from '../traits'\n\nexport class StaticExtension extends Extension {\n  constructor(\n    parent: Extension | undefined,\n    node: DataTrait,\n    public data: UNodeExtension,\n    keyedBy?: any\n  ) {\n    super(parent, node, keyedBy)\n  }\n}\n","import { Extension } from './Extension'\nimport { Accessor } from '../../Accessor'\nimport { ComputableExtension } from './ComputableExtension'\nimport { computed } from '@gqless/utils'\nimport { ScalarNode } from '../ScalarNode'\n\nexport class ComputedExtension extends Extension {\n  constructor(parent: ComputableExtension, public accessor: Accessor) {\n    super(parent, parent.node)\n  }\n\n  @computed\n  public get data(): any {\n    const data =\n      this.accessor.node instanceof ScalarNode\n        ? this.accessor.getData({\n            // Remove extensions, to prevent an infinite loop\n            extensions: [],\n          })\n        : this.accessor.data\n\n    return (this.parent as ComputableExtension).getData(data)\n  }\n}\n","import { Value } from '../../Cache'\n\nexport class Matchable {\n  public match(value: Value, data: any): Value | null | void {\n    // Direct equal\n    if (value.data === data) return value\n\n    // Support for callback-style\n    if (typeof data === 'function') {\n      const isAMatch = data(value.data)\n\n      return isAMatch ? (isAMatch instanceof Value ? isAMatch : value) : null\n    }\n    // Can only be a match with null\n    // if both equal null\n    if (value.data === null || data === null) return null\n  }\n}\n","import {\n  NodeExtension,\n  StaticExtension,\n  ComputableExtension,\n  createExtension,\n  ComputedExtension,\n} from './Extension'\nimport { Matchable } from './abstract/Matchable'\nimport { Value } from '../Cache'\nimport {\n  DataTrait,\n  DataContext,\n  getExtensions,\n  getValue,\n  interceptAccessor,\n} from './traits'\n\nexport type IScalarNodeOptions = {\n  name?: string\n  extension?: NodeExtension\n}\n\nexport class ScalarNode extends Matchable implements DataTrait {\n  public extension?: StaticExtension | ComputableExtension\n  public name?: string\n\n  constructor({ name, extension }: IScalarNodeOptions = {}) {\n    super()\n\n    this.name = name\n\n    if (extension) {\n      this.extension = createExtension(this, extension)\n    }\n  }\n\n  public match(value: Value, data: any) {\n    const result = super.match(value, data)\n    if (result !== undefined) return result\n\n    if (data instanceof RegExp) {\n      const input = String(value.data)\n      return input.match(data) ? value : undefined\n    }\n\n    return\n  }\n\n  public toString() {\n    return this.name || this.constructor.name\n  }\n\n  public getData(ctx: DataContext) {\n    interceptAccessor(ctx)\n\n    const extensions = getExtensions(ctx)\n    const value = getValue(ctx)\n\n    const extension = extensions[0]\n    if (extension) {\n      return extension.data\n    }\n\n    if (!value) return null\n    return value.data\n  }\n}\n","import { computed } from '@gqless/utils'\n\nexport class NodeContainer<TNode extends object> {\n  constructor(public ofNode: TNode, public nullable = false) {}\n\n  @computed\n  public get innerNode(): object {\n    if (this.ofNode instanceof NodeContainer) {\n      return this.ofNode.innerNode\n    }\n\n    return this.ofNode\n  }\n}\n","import { invariant } from '@gqless/utils'\nimport { deepJSONEqual } from '../../../utils'\nimport { Arguments } from '../../Arguments'\nimport { FieldAccessor } from '../../../Accessor'\nimport { FieldSelection } from '../../../Selection'\nimport { EnumNode } from '../../EnumNode'\nimport { ScalarNode } from '../../ScalarNode'\nimport { NodeContainer } from '../NodeContainer'\nimport { FieldsNode } from './FieldsNode'\nimport { Variable } from '../../../Variable'\nimport {\n  DataTrait,\n  DataContext,\n  getSelection,\n  interceptAccessor,\n} from '../../traits'\n\nexport class FieldNode<TNode extends DataTrait = DataTrait>\n  extends NodeContainer<TNode>\n  implements DataTrait {\n  // This is set inside FieldsNode\n  public name: string = ''\n\n  constructor(node: TNode, public args?: Arguments, nullable?: boolean) {\n    super(node, nullable)\n  }\n\n  public get uncallable() {\n    return !(\n      this.args &&\n      (this.args.required ||\n        this.ofNode instanceof ScalarNode ||\n        this.ofNode instanceof EnumNode)\n    )\n  }\n\n  public getSelection(\n    ctx: DataContext,\n    args?: Record<string, any>\n  ): FieldSelection<TNode> {\n    interceptAccessor(ctx)\n\n    const parentSelection = getSelection(ctx)\n\n    let selection = parentSelection?.get<FieldSelection<TNode>>(selection => {\n      if (!(selection instanceof FieldSelection)) return false\n\n      return (\n        selection.field.name === this.name &&\n        deepJSONEqual(selection.args, args, (a, b) => {\n          // If either is a variable they need to be equal\n          if (a instanceof Variable || b instanceof Variable) return a === b\n\n          return undefined\n        })\n      )\n    })\n\n    if (selection) return selection\n\n    selection = new FieldSelection(this, args)\n    parentSelection?.add(selection)\n\n    return selection\n  }\n\n  public getData(ctx: DataContext<FieldsNode & DataTrait>) {\n    const getData = (selection: FieldSelection<TNode>): any => {\n      if (ctx.accessor) {\n        const accessor =\n          ctx.accessor.get(selection) ||\n          new FieldAccessor(ctx.accessor, selection)\n\n        return accessor.data\n      }\n\n      return this.ofNode.getData({\n        selection,\n        value: ctx.value?.get(selection.toString()),\n        extensions: [], // TODO\n      })\n    }\n\n    const argsFn = (args: any) => {\n      const parsedArgs = args && (Object.keys(args).length ? args : undefined)\n      return getData(this.getSelection(ctx, parsedArgs))\n    }\n\n    if (!this.uncallable) return argsFn\n\n    let selection: FieldSelection<TNode> | undefined\n    let data: any\n    const argumentlessData = () => {\n      if (selection) return data\n      selection = this.getSelection(ctx)\n      data = getData(selection)\n      return data\n    }\n\n    if (this.args) {\n      return new Proxy(argsFn, {\n        get: (_, prop) => {\n          const data = argumentlessData()\n\n          invariant(\n            data,\n            `Cannot read property '${String(\n              prop\n            )}' on null [${selection}]\\n\\n` +\n              `You should check for null using \\`${selection}() && ${selection}().${String(\n                prop\n              )}\\``\n          )\n\n          const result = data[prop]\n\n          if (typeof result === 'function') {\n            return result.bind(data)\n          }\n\n          return result\n        },\n        set: (_, prop, value) => {\n          const data = argumentlessData()\n\n          invariant(\n            data,\n            `Cannot set property '${String(prop)}' on null [${selection}]\\n\\n` +\n              `You should check for null using \\`${selection}() && ${selection}().${String(\n                prop\n              )}\\``\n          )\n\n          data[prop] = value\n\n          return true\n        },\n      })\n    }\n\n    return argumentlessData()\n  }\n\n  public toString() {\n    return this.name\n  }\n}\n","import { ObjectNode } from '../ObjectNode'\nimport { ACCESSOR, FragmentAccessor } from '../../Accessor'\nimport { invariant } from '@gqless/utils'\nimport {\n  DataTrait,\n  DataContext,\n  getValue,\n  getExtensions,\n  interceptAccessor,\n} from '../traits'\n\nexport const getAbstractImplementation = (node: object, typename: string) => {\n  if (node instanceof Abstract && typename) {\n    const implementation = node.implementations.find(\n      i => i.toString() === typename\n    )\n    invariant(implementation, `'${typename}' is not a valid subtype of ${node}`)\n    return implementation\n  }\n\n  return\n}\n\nexport class Abstract<TNode extends ObjectNode = ObjectNode>\n  implements DataTrait {\n  private abstractProxy: any\n  protected abstractCtx: any\n\n  constructor(public implementations: TNode[]) {}\n\n  public getData(ctx: DataContext) {\n    interceptAccessor(ctx)\n\n    const value = getValue(ctx)\n\n    // If the value is nulled, return null\n    if (value) {\n      if (value.data === null) return null\n\n      if (ctx.accessor) {\n        const fragment = ctx.accessor.getDefaultFragment(\n          value.node as ObjectNode\n        )\n        const fragmentAccessor =\n          ctx.accessor.get(fragment) ||\n          new FragmentAccessor(ctx.accessor, fragment)\n\n        return fragmentAccessor.data\n      }\n    }\n\n    return new Proxy(\n      {},\n      {\n        get: (_, prop: any) => {\n          const fragment = ctx.accessor?.fragmentToResolve\n          if (fragment) return fragment.data?.[prop]\n\n          if (prop === ACCESSOR) return ctx.accessor\n\n          if (prop === '__typename') {\n            return getValue(ctx)?.node.toString()\n          }\n\n          if (prop === 'toString') return () => this.toString()\n\n          // fallback to extensions\n          for (const extension of getExtensions(ctx)) {\n            if (prop in extension.data) return extension.data[prop]\n          }\n        },\n\n        set: (_, prop: any, value: any) => {\n          const fragment = ctx.accessor?.fragmentToResolve\n          if (fragment) {\n            const { data } = fragment\n            if (data) data[prop] = value\n            return true\n          }\n\n          // else set it on the first extension with the property\n          for (const extension of getExtensions(ctx)) {\n            if (prop in extension) {\n              extension.data[prop] = value\n              return true\n            }\n          }\n\n          return true\n        },\n      }\n    )\n  }\n\n  public toString() {\n    return this.implementations.join('|')\n  }\n}\n","import { Generic, Mix } from 'mix-classes'\n\nimport { IndexAccessor } from '../Accessor'\nimport { ACCESSOR } from '../Accessor'\nimport { NodeContainer, Matchable } from './abstract'\nimport { Value } from '../Cache'\nimport { ArrayNodeExtension } from './Extension'\nimport { createMemo } from '@gqless/utils'\nimport {\n  DataTrait,\n  DataContext,\n  getValue,\n  getExtensions,\n  interceptAccessor,\n} from './traits'\n\nexport interface ArrayNode<TNode extends object = object>\n  extends NodeContainer<TNode> {}\n\nconst memo = createMemo()\n\nexport class ArrayNode<TNode> extends Mix(Generic(NodeContainer), Matchable)\n  implements DataTrait {\n  constructor(ofNode: TNode, nullable?: boolean) {\n    // memoize instances of ArrayNode\n    const existingNode = memo<ArrayNode<TNode>>([ofNode, nullable])\n    if (existingNode) return existingNode\n\n    super([ofNode, nullable])\n\n    memo(() => this, [ofNode, nullable])\n  }\n\n  public match(value: Value, data: any) {\n    const result = super.match(value, data)\n    if (result !== undefined) return result\n\n    // Whole array match\n    if (Array.isArray(data)) {\n      if (data.length !== (value.data! as []).length) return\n\n      const badMatch = data.find((match, i) => {\n        const indexValue = value.get(i)\n        if (!indexValue) return true\n\n        if (!(indexValue.node instanceof Matchable)) return\n\n        return !indexValue.node.match(indexValue, data[i])\n      })\n      if (badMatch) return\n\n      return value\n    }\n\n    // Array index match\n    const innerNode = (value.node as ArrayNode).innerNode\n    if (!(innerNode instanceof Matchable)) return\n\n    for (const indexValue of value.data as []) {\n      const match = innerNode.match(indexValue, data)\n      if (match) return match\n    }\n\n    return\n  }\n\n  public getData(ctx: DataContext<ArrayNode<TNode>>) {\n    interceptAccessor(ctx)\n\n    const proxy: any[] = new Proxy([] as any[], {\n      get: (target, prop: any) => {\n        if (prop === ACCESSOR) return ctx.accessor\n        const arr = getValue(ctx)?.data as any[] | undefined\n\n        if (prop === 'length') {\n          return arr?.length ?? 1\n        }\n\n        if (prop === 'toString') {\n          return () => this.toString()\n        }\n\n        if (typeof prop === 'string') {\n          const index = +prop\n\n          if (!isNaN(index)) {\n            // If the array is fetched, make sure index exists\n            if (arr && index >= arr!.length) return undefined\n\n            if (ctx.accessor) {\n              const accessor: IndexAccessor =\n                ctx.accessor.get(index) ||\n                new IndexAccessor(ctx.accessor, index)\n\n              return accessor.data\n            }\n\n            return ((this.ofNode as any) as DataTrait).getData({\n              value: ctx.value?.get(index),\n              selection: ctx.selection,\n              extensions: [], // todo\n            })\n          }\n        }\n\n        // fallback to extensions\n        for (const extension of getExtensions(ctx)) {\n          if (prop in extension.data)\n            return (extension.data as ArrayNodeExtension)[prop]\n        }\n\n        const arrayProperty = target[prop]\n        if (typeof arrayProperty === 'function') {\n          return arrayProperty.bind(proxy)\n        }\n\n        return arrayProperty\n      },\n      has: (target, prop) => {\n        const value = getValue(ctx)\n        if (value) {\n          return value.data ? prop in (value.data as any[]) : false\n        }\n\n        // todo read value\n        if (typeof prop === 'string' && !isNaN(+prop)) {\n          return true\n        }\n\n        return prop in target\n      },\n    })\n\n    return proxy\n  }\n\n  public toString() {\n    return `[${this.ofNode}${this.nullable ? '' : '!'}]`\n  }\n}\n","import { Generic, Mix, getMixin } from 'mix-classes'\n\nimport {\n  FieldsNode,\n  IFieldsNodeOptions,\n  Abstract,\n  UFieldsNodeRecord,\n} from './abstract'\nimport {\n  NodeExtension,\n  StaticExtension,\n  ComputableExtension,\n  createExtension,\n} from './Extension'\nimport { ObjectNode } from './ObjectNode'\nimport { FieldAccessor } from '../Accessor'\nimport { DataTrait, DataContext } from './traits'\n\nexport type IInterfaceNodeOptions = IFieldsNodeOptions & {\n  extension?: NodeExtension\n}\n\nexport interface InterfaceNode<TImplementation extends ObjectNode = ObjectNode>\n  extends Abstract<TImplementation> {}\n\nexport class InterfaceNode<TImplementation>\n  extends Mix(FieldsNode, Generic(Abstract))\n  implements DataTrait {\n  public extension?: StaticExtension | ComputableExtension\n\n  constructor(\n    fields: UFieldsNodeRecord,\n    implementations: TImplementation[],\n    options: IInterfaceNodeOptions\n  ) {\n    super([fields, options], [implementations])\n\n    if (options.extension) {\n      this.extension = createExtension(this, options.extension)\n    }\n  }\n\n  public getData(ctx: DataContext): any {\n    // @ts-ignore typescript limitation of mix-classes\n    const data = super.getData(ctx)\n    if (!data) return data\n    return new Proxy(data, {\n      get: (_, prop: any) => {\n        const fragment = ctx.accessor?.fragmentToResolve\n        if (fragment) return fragment.data?.[prop]\n\n        // If the prop exists in this interface,\n        // return directly from interface\n        if (this.fields.hasOwnProperty(prop)) {\n          const field = this.fields[prop]\n\n          // if (field.args) {\n          //   return (args: any) => {\n          //     // forEach key in args\n\n          //     // if key in an implementation, create implementation accessor\n\n          //     // create interface accessor\n          //   }\n          // }\n\n          return field.getData(ctx as any)\n        }\n\n        // if prop only in one implementation\n\n        // else throw an error if it doesn't satisfy conditions\n\n        return data[prop]\n      },\n\n      set: (_, prop: string, value) => {\n        const fragment = ctx.accessor?.fragmentToResolve\n        if (fragment) {\n          const { data } = fragment\n          if (data) data[prop] = value\n          return true\n        }\n\n        if (prop === '__typename') return true\n\n        /**\n         * If setting a field, create a new accessor and set data\n         */\n        if (this.fields.hasOwnProperty(prop)) {\n          if (!ctx.accessor) return true\n\n          const field = this.fields[prop]\n          const selection = field.getSelection(ctx)\n\n          const fieldAccessor =\n            ctx.accessor.get(selection) ||\n            new FieldAccessor(ctx.accessor, selection)\n\n          fieldAccessor.setData(data)\n\n          return true\n        }\n\n        data[prop] = value\n\n        return true\n      },\n    })\n  }\n\n  public toString() {\n    return getMixin(this, FieldsNode)!.toString()\n  }\n}\n","import { Mix } from 'mix-classes'\nimport { FieldAccessor } from '../Accessor'\nimport { ACCESSOR } from '../Accessor/Accessor'\nimport {\n  FieldNode,\n  FieldsNode,\n  IFieldsNodeOptions,\n  UFieldsNodeRecord,\n  Matchable,\n} from './abstract'\nimport { ScalarNode } from './ScalarNode'\nimport { Value } from '../Cache'\nimport {\n  ComputableExtension,\n  StaticExtension,\n  createExtension,\n} from './Extension'\nimport { DataTrait, DataContext, getValue, getExtensions } from './traits'\n\nexport type IObjectNodeOptions = IFieldsNodeOptions\n\nconst TYPENAME_NODE = new ScalarNode()\n\nexport class ObjectNode extends Mix(FieldsNode, Matchable)\n  implements DataTrait {\n  public extension?: ComputableExtension | StaticExtension\n\n  constructor(fields: UFieldsNodeRecord, options: IObjectNodeOptions) {\n    fields.__typename = new FieldNode(TYPENAME_NODE)\n    super([fields as any, options])\n\n    if (options.extension) {\n      this.extension = createExtension(this, options.extension)\n    }\n  }\n\n  public match(value: Value, data: any) {\n    const result = super.match(value, data)\n    if (result !== undefined) return result\n\n    let matches = 0\n\n    for (const key in data) {\n      if (!this.fields.hasOwnProperty(key)) continue\n      const field = this.fields[key]\n      if (!(field.ofNode instanceof Matchable)) continue\n\n      const keyValue = value.get(key)\n      const keyData = data[key]\n\n      if (!keyValue) continue\n\n      const isMatch = field.ofNode.match(keyValue, keyData)\n      if (!isMatch) return\n      matches++\n    }\n\n    return matches ? value : undefined\n  }\n\n  public getData(ctx: DataContext): any {\n    const value = getValue(ctx)\n\n    if (value?.data === null) return null\n\n    return new Proxy({} as any, {\n      get: (_, prop: any) => {\n        const fragment = ctx.accessor?.fragmentToResolve\n        if (fragment) return fragment.data?.[prop]\n\n        if (prop === ACCESSOR) return ctx.accessor\n        // Statically resolve __typename\n        if (prop === '__typename') return this.name\n\n        // check fields first\n        if (this.fields.hasOwnProperty(prop)) {\n          const field = this.fields[prop]\n\n          return field.getData(ctx as any)\n        }\n\n        if (prop === 'toString') return () => this.toString()\n\n        // fallback to extensions\n\n        for (const extension of getExtensions(ctx)) {\n          if (prop in extension.data) return extension.data[prop]\n        }\n      },\n\n      set: (_, prop: string, value) => {\n        const fragment = ctx.accessor?.fragmentToResolve\n        if (fragment) {\n          const { data } = fragment\n          if (data) data[prop] = value\n          return true\n        }\n\n        if (prop === '__typename') return true\n\n        /**\n         * If setting a field, create a new accessor and set data\n         */\n        if (this.fields.hasOwnProperty(prop)) {\n          if (!ctx.accessor) return true\n\n          const field = this.fields[prop]\n          const selection = field.getSelection(ctx)\n\n          const fieldAccessor =\n            ctx.accessor.get(selection) ||\n            new FieldAccessor(ctx.accessor, selection)\n\n          fieldAccessor.setData(value)\n\n          return true\n        }\n\n        /**\n         * else set it on the first extension with the property\n         */\n        for (const extension of getExtensions(ctx)) {\n          if (prop in extension.data) {\n            extension.data[prop] = value\n            return true\n          }\n        }\n\n        return true\n      },\n    })\n  }\n}\n","import { Abstract } from './abstract'\nimport { ObjectNode } from './ObjectNode'\n\nexport class UnionNode<TNode extends ObjectNode = ObjectNode> extends Abstract {\n  constructor(ofNodes: TNode[]) {\n    super(ofNodes)\n  }\n}\n","import { lazyGetters } from '@gqless/utils'\n\nimport { ArrayNode } from '../ArrayNode'\nimport { EnumNode } from '../EnumNode'\nimport { ScalarNode } from '../ScalarNode'\nimport { InputNodeField } from './InputNodeField'\n\nexport type UInputNode = ScalarNode | ArrayNode | InputNode | EnumNode\n\ntype UInputNodeRecord = Record<string, InputNodeField>\n\nexport type IInputNodeOptions = {\n  name: string\n}\n\nexport class InputNode {\n  public name?: string\n  public inputs: UInputNodeRecord\n\n  constructor(inputs: UInputNodeRecord, { name }: IInputNodeOptions) {\n    this.name = name\n    this.inputs = lazyGetters(inputs)\n  }\n\n  public toString() {\n    return this.name || this.constructor.name\n  }\n}\n","import { NodeContainer } from '../abstract'\nimport { UInputNode } from './InputNode'\n\nexport class InputNodeField extends NodeContainer<UInputNode> {\n  constructor(node: UInputNode, nullable?: boolean) {\n    super(node, nullable)\n  }\n}\n","import { lazyGetters } from '@gqless/utils'\n\nimport { ArrayNode, InputNode, ScalarNode } from '../'\nimport { EnumNode } from '../EnumNode'\nimport { ArgumentsField } from './ArgumentsField'\n\nexport type UArguments =\n  | ScalarNode\n  | EnumNode\n  | ArrayNode<any>\n  | ArgumentsField\n  | InputNode\n\ntype UArgumentsRecord = Record<string, ArgumentsField>\n\nexport class Arguments {\n  public inputs: UArgumentsRecord\n\n  constructor(inputs: UArgumentsRecord, public required = false) {\n    this.inputs = lazyGetters(inputs, (fieldName, field) => {\n      // Called when the getter prop is evaluated\n      field.name = fieldName as string\n    })\n  }\n}\n","import { NodeContainer } from '../abstract'\nimport { UArguments } from './Arguments'\n\nexport class ArgumentsField extends NodeContainer<UArguments> {\n  // This is set inside Arguments\n  public name: string = ''\n\n  constructor(node: UArguments, nullable?: boolean) {\n    super(node, nullable)\n  }\n}\n","import { RootAccessor, Accessor } from './Accessor'\nimport { Cache } from './Cache'\nimport { ObjectNode } from './Node'\nimport { Plugins } from './Plugin'\nimport { Scheduler } from './Scheduler'\nimport { Selection } from './Selection'\nimport { Disposable } from './utils'\nimport { buildQuery, Formatter } from './QueryBuilder'\n\nexport type QueryResponse<Data = any> = { data: Data; errors: any }\n\nexport type QueryFetcher = (\n  query: string,\n  variables?: Record<string, any>\n) => Promise<QueryResponse> | QueryResponse\n\nexport type ClientOptions = {\n  prettifyQueries?: boolean\n}\n\n// @ts-ignore\nexport class Client<TData = any> extends Disposable {\n  public plugins = new Plugins()\n  public formatter: Formatter\n\n  public scheduler = new Scheduler(\n    (accessors, name) => this.fetchAccessors(accessors, name)!,\n    this.plugins\n  )\n  public cache = new Cache(this.node)\n\n  public selection = new Selection(this.node)\n  public accessor = new RootAccessor(this.selection, this.scheduler, this.cache)\n\n  public query = this.accessor.data as TData\n\n  constructor(\n    protected node: ObjectNode,\n    protected fetchQuery: QueryFetcher,\n    { prettifyQueries }: ClientOptions = {}\n  ) {\n    super()\n\n    this.formatter = new Formatter({\n      prettify: prettifyQueries,\n      fragments: 'auto',\n      variables: true,\n    })\n    this.selection.onSelect.listen(selection => {\n      this.plugins.all.onSelect(selection)\n    })\n\n    this.selection.onUnselect.listen(selection => {\n      this.plugins.all.onUnselect(selection)\n    })\n  }\n\n  protected fetchAccessors(accessors: Accessor[], queryName?: string) {\n    const result = buildQuery(\n      this.formatter,\n      queryName,\n      ...accessors.map(accessor => accessor.selectionPath)\n    )\n\n    if (!result) return\n\n    const responsePromise = (async () => {\n      const response = await this.fetchQuery(result.query, result.variables)\n      result.rootTree.resolveAliases(response.data)\n      this.cache.merge(this.accessor, response.data)\n      return response\n    })()\n\n    this.plugins.all.onFetch(\n      accessors,\n      responsePromise,\n      result.variables,\n      result.query,\n      queryName\n    )\n\n    return responsePromise\n  }\n\n  public dispose() {\n    super.dispose()\n    this.scheduler.dispose()\n\n    this.plugins.all.dispose()\n  }\n}\n","import { Accessor, getAccessor } from '../Accessor'\nimport { Query } from '../Scheduler'\n\n// @TODO selection.onStatusChange should reset the timer\n// if it's been called from outside\n\nexport class Poller {\n  private accessor: Accessor\n\n  private timer?: number\n  private unstage?: Function\n\n  public polling = false\n\n  constructor(data: any, public interval: number, public stack?: Query[]) {\n    this.accessor = getAccessor(data)\n  }\n\n  public updateInterval(interval: number) {\n    if (this.interval === interval) return\n    this.interval = interval\n\n    this.resetTimer()\n  }\n\n  /**\n   * Polls the selection, scheduling a new poll\n   * only after it's been fetched\n   */\n  private async poll() {\n    this.unstage = this.accessor.scheduler.commit.stage(\n      this.accessor,\n      ...(this.stack || [])\n    )\n\n    // Wait until it's been fetched, before polling again\n    await this.accessor.onStatusChange\n\n    this.unstage = undefined\n\n    // If we're still polling after we've fetched\n    // the selection, then poll again\n    if (this.polling) {\n      this.pollAfterInterval()\n    }\n  }\n\n  private pollAfterInterval() {\n    this.timer = setTimeout(() => this.poll(), this.interval)\n  }\n\n  public resetTimer() {\n    if (this.polling) this.toggle(true)\n  }\n\n  public toggle(poll = !this.polling) {\n    this.polling = poll\n\n    this.unstage?.()\n    clearTimeout(this.timer)\n\n    if (!poll) return\n\n    this.pollAfterInterval()\n  }\n}\n","import { getAccessor } from '../Accessor'\n\n/**\n * Updates an accessor, with a compatible Value matching a pattern\n *\n * @example\n * // true for correct matches\n * matchUpdate(query.me, { id: 'Bob' })\n * // => true\n *\n * // returns false for bad matches\n * matchUpdate(query.me, { id: 'no' })\n * // => false\n */\nexport const matchUpdate = (data: any, pattern: any) => {\n  const accessor = getAccessor(data)\n  const entry = accessor.cache.entries.get(accessor.node)\n  if (!entry) return false\n\n  const match = entry.match(pattern)\n  if (!match) return false\n\n  accessor.updateValue(match.value)\n  return true\n}\n","import { getAccessor } from '../Accessor'\n\n/**\n * Updates the Value for an accessor\n *\n * @example\n * // Update a scalar\n * update(query.me.name, 'bob')\n *\n * // Update an object\n * update(query, { me: { name: 'bob' } })\n */\nexport const update = (data: any, newData: any) => {\n  const accessor = getAccessor(data)\n\n  return accessor.setData(newData)\n}\n","import { Fragment } from '../Selection'\nimport { getAccessor, FragmentAccessor } from '../Accessor'\n\n/**\n * Attaches a fragment to an accessor, and returns the data\n *\n * @example\n * fragmentOn(query.me, new Fragment(schema.User))\n */\nexport const fragmentOn = (data: any, fragment: Fragment) => {\n  const accessor = getAccessor(data)\n\n  let fragmentAccessor = (accessor instanceof FragmentAccessor\n    ? accessor.parent\n    : accessor\n  ).get(fragment)\n\n  if (!fragmentAccessor) {\n    accessor.selection.add(fragment)\n    fragmentAccessor = new FragmentAccessor(accessor, fragment)\n  }\n\n  return fragmentAccessor.data\n}\n","import { getAccessor } from '../Accessor'\n\n/**\n * Refetches an accessor\n *\n * @example\n * refetch(query.me)\n */\nexport const refetch = (data: any) => {\n  const accessor = getAccessor(data)\n  accessor.scheduler.commit.stage(accessor)\n}\n","import { invariant } from '@gqless/utils'\n\n/**\n * Preload a function / React component\n *\n * @example\n * // Preload a React Component\n * preload(UserComponent, { user })\n *\n * // Preload a normal function\n * preload(getFullName, user)\n */\nexport const preload = <T extends (...args: any[]) => any>(\n  _func: T,\n  ..._args: T extends (...args: infer U) => any\n    ? Partial<{ [K in keyof U]: Partial<U[K]> }>\n    : never\n) => {\n  // This function will be replaced by babel plugin\n  invariant(false as true, `babel-plugin-gqless is required for preloading`)\n}\n","import { getAccessor, NetworkStatus, Accessor } from '../Accessor'\nimport { Interceptor } from '../Interceptor'\n\ninterface ResolvedOptions {\n  waitForUpdate?: boolean\n  refetch?: boolean\n}\n\n/**\n * Waits for an accessor / function to be fully resolved,\n * and returns the final value\n *\n * @example\n * const name = await resolved(query.me.name)\n * console.log(name)\n *\n * @example\n * const data = await resolved(() => ({ name: query.me.name }))\n * console.log(data.name)\n *\n * @example\n * await resolved(query.me.name)\n * console.log(query.me.name)\n */\nexport function resolved<T>(\n  data: T,\n  options?: ResolvedOptions\n): Promise<T extends (...args: any[]) => infer U ? U : T> {\n  const isResolved = (accessor: Accessor) =>\n    options?.waitForUpdate || false\n      ? accessor.status === NetworkStatus.idle\n      : accessor.status !== NetworkStatus.loading\n\n  let accessor: Accessor\n  try {\n    accessor = getAccessor(data)\n    if (options?.refetch) accessor.scheduler.commit.stage(accessor)\n  } catch (err) {\n    if (typeof data !== 'function') throw err\n\n    const interceptor = new Interceptor()\n    const nonIdleAccessors = new Set<Accessor>()\n\n    interceptor.onAccessor.listen(acc => {\n      if (nonIdleAccessors.has(acc)) return\n      nonIdleAccessors.add(acc)\n      if (options?.refetch) acc.scheduler.commit.stage(acc)\n    })\n\n    interceptor.start()\n    try {\n      var result = data()\n    } finally {\n      interceptor.stop()\n    }\n\n    return new Promise((resolve, reject) => {\n      nonIdleAccessors.forEach(acc => {\n        if (isResolved(acc)) {\n          nonIdleAccessors.delete(acc)\n          return\n        }\n\n        const dispose = acc.onStatusChange.listen(() => {\n          if (!isResolved(acc)) return\n          dispose()\n\n          nonIdleAccessors.delete(acc)\n          if (nonIdleAccessors.size) return\n\n          try {\n            const finalResult = data()\n            resolve(finalResult)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      })\n\n      if (!nonIdleAccessors.size) {\n        resolve(result)\n      }\n    })\n  }\n\n  if (isResolved(accessor)) {\n    return Promise.resolve(data) as any\n  }\n\n  return new Promise<any>(resolve => {\n    // TODO: Support for promise reject\n    accessor.onStatusChange.listen(() => {\n      if (isResolved(accessor)) resolve(accessor.data)\n    })\n  })\n}\n"],"names":["id","Value","constructor","node","data","ArrayNode","Map","createEvent","onSet","listen","key","value","references","has","set","Set","referencedKeys","get","size","onReference","emit","add","filter","k","then","delete","onUnreference","_data","prevData","Object","entries","forEach","String","onChange","hasOwnProperty","undefined","prevValue","toJSON","deep","map","ObjectNode","obj","__typename","name","deepReference","rootValue","disposers","valueReferences","WeakMap","count","watchAndEmit","parentValue","watcherDisposers","handleReference","unrefFromParent","v","dispose","ref","keys","disposeWatcher","createValue","ScalarNode","EnumNode","extensionsForKey","extensions","nodes","keyedExtensions","extension","keyExtension","push","Selection","selection","isKeySelection","invariant","keySelections","selections","onSelect","onUnselect","find","off","emitUnselect","toString","Variable","options","assign","updateValue","nullable","updateNullable","validateNode","Disposable","addDisposer","deleteDiposer","disposed","call","uniquify","desiredName","isTaken","unique","differentName","deepJSONEqual","a","b","customCompare","isEqual","length","i","Array","isArray","prototype","PathArray","items","setPrototypeOf","create","element","join","camelCase","word","toUpperCase","substr","arrayEqual","every","buildVariable","variable","info","prettify","path","variables","existingVariable","buildArguments","SPACE","SEPARATOR","formatter","args","buildKeyed","arg","context","sort","keyContext","field","inputs","ofNode","result","build","Boolean","JSON","stringify","indexContext","arrayNode","buildSelections","LINE_SEPARATOR","tree","innerNode","NodeContainer","includeTypename","children","Fragment","buildSelectionTree","buildFieldSelectionTree","hug","indent","buildAlias","alias","buildArgs","buildChildren","buildFragmentTree","fragmentName","allFragments","fragments","parentNode","parent","huggedSelections","replace","FieldSelection","getAlias","siblingTree","Number","MAX_VALUE","resolveAliases","recurse","originals","updated","recurseObjectTree","cacheKey","from","indexData","SelectionTree","duplicatedFragments","fragmentTree","getExistingTree","fragment","existingName","t","__decorate","computed","toTree","rootTree","addSelectionToTree","pathToSelection","validSelection","slice","s","index","findIndex","newTree","keySelection","buildFragments","NEWLINE","buildFragment","buildQuery","queryName","selectionPaths","variablesMap","buildVariables","queryHeader","query","Formatter","string","repeat","argsFormatter","selectionsForKey","selectionsFilter","NodeEntry","match","Matchable","instances","exactValue","getByKey","possibleKey","keyIsEqual","getKeyFromCache","cache","entry","preferedKey","isKeyable","getKey","keyIsValid","keyedValue","FIELD_NAME","merge","mergeScalar","wasNull","isNull","iterateObject","iterateArray","keyedMerge","keyFragments","includes","completeMerge","arrayValue","arrayExtensions","nodeImplementation","getAbstractImplementation","e","childIndex","objectValue","objectData","objectExtensions","mergeObjectKey","filteredSelections","fieldName","fields","childField","mergeFiltered","createPath","accessor","currentTransaction","Transaction","begin","end","flush","callbacks","clear","callback","onComplete","afterTransaction","Cache","onRootValueChange","addToEntries","graphNode","_rootValue","transaction","types","nodeEntry","Plugins","Proxy","_","plugins","plugin","isCorrectValue","remove","idx","indexOf","splice","queriesFromStacks","stacks","queryWeights","getWeights","weights","amount","stack","sortedWeights","weight","prevWeight","priority","finalQueries","queriesCount","possibleQueries","stackSize","highestCount","chosenQuery","Query","defaultQuery","Commit","fetchAccessors","stageUntilValue","resolved","unstage","stage","onValueChange","onResolvedChange","queries","status","NetworkStatus","idle","accessors","onActive","updating","loading","onIdle","fetch","values","stackQueries","all","onCommit","promises","promise","Promise","console","error","onFetched","Scheduler","interval","startTimer","clearTimer","pushStack","popStack","commit","timer","setTimeout","clearTimeout","onDataChange","onValueAssociated","check","newData","syncValue","getFromValue","withAccessor","isFn","getValue","associateValue","accessorInterceptors","Interceptor","start","onAccessor","listening","stop","ACCESSOR","Symbol","KEYED_REFETCH","memoized","createMemo","Accessor","scheduler","loadExtensions","onInitializeExtensions","_resolved","prevResolved","fragmentToResolve","getData","intercept","prevStatus","_status","onStatusChange","_value","initializeExtensions","addExtensions","ComputableExtension","ComputedExtension","unshift","Abstract","implementations","prevExtensions","isTopLevel","FragmentAccessor","redirect","valueless","accessorWithoutValue","ctx","setData","log","c","getDefaultFragment","selectionPath","basePath","FieldAccessor","fieldSelection","startResolving","originalAccessor","resetAccessor","removeDisposer","IndexAccessor","RootAccessor","lastAccessor","interceptor","getAccessor","input","lastAccessorErrorMessage","message","FieldsNode","lazyGetters","interceptAccessor","getExtensions","getSelection","REDIRECT","INDEX","GET_KEY","createExtension","keyedBy","StaticExtension","memo","Extension","fragmentKeyedBy","fragmentKey","indexExtension","fieldExtension","isAMatch","RegExp","FieldNode","uncallable","required","parentSelection","argsFn","parsedArgs","argumentlessData","prop","bind","typename","implementation","fragmentAccessor","Mix","Generic","existingNode","badMatch","indexValue","proxy","target","arr","isNaN","arrayProperty","InterfaceNode","fieldAccessor","getMixin","TYPENAME_NODE","matches","keyValue","keyData","isMatch","UnionNode","ofNodes","InputNode","InputNodeField","Arguments","ArgumentsField","Client","fetchQuery","prettifyQueries","responsePromise","response","onFetch","Poller","updateInterval","resetTimer","poll","polling","pollAfterInterval","toggle","matchUpdate","pattern","update","fragmentOn","refetch","preload","_func","_args","isResolved","waitForUpdate","err","nonIdleAccessors","acc","resolve","reject","finalResult"],"mappings":"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"}