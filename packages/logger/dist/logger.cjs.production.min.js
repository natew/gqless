'use strict'
Object.defineProperty(exports, '__esModule', { value: !0 })
var e = require('gqless'),
  o = require('to-style'),
  t = require('flatted')
const n = Symbol('JSX_ELEMENT')
function r(e, t, ...r) {
  return 'function' == typeof e
    ? ((r[n] = !0), e({ ...t, children: r }))
    : (t && t.style && (t.style = o.string(t.style)),
      Array.isArray(r) && r[0] && r[0][n] && ([r] = r),
      [
        e,
        t,
        ...r
          .map(e =>
            Array.isArray(e) && !e.find(e => !Array.isArray(e)) ? e : [e]
          )
          .flat()
          .filter(Boolean),
      ])
}
function s({ path: e, isRoot: o, isFragment: t, objectDepth: n }) {
  return r(
    'span',
    null,
    e.map((s, l) => {
      const c = t && t(s),
        a = o && o(s)
      return r(
        'span',
        null,
        c &&
          (n
            ? r('span', null, '...')
            : r(
                'span',
                { style: { color: 'rgb(154, 127, 213)' } },
                'fragment',
                1 === e.length ? ' ' : '['
              )),
        r(
          'span',
          {
            style: {
              color: c ? '#5db0d7' : n ? '#E36EEC' : a ? '#03A9F4' : '#D2C057',
              fontWeight: a && !n ? 'bold' : 'normal',
            },
          },
          s.toString()
        ),
        c &&
          r(
            'span',
            { style: { color: 'rgb(154, 127, 213)' } },
            r(
              'span',
              null,
              ' ',
              'on',
              ' ',
              r('span', { style: { color: '#E36EEC' } }, String(s.node))
            ),
            1 !== e.length && !n && r('span', null, ']')
          ),
        l !== e.length - 1 && r('span', { style: { opacity: 0.8 } }, '.')
      )
    })
  )
}
const l = ({ children: e }) =>
    r(
      'ol',
      {
        style: {
          listStyleType: 'none',
          padding: 0,
          margin: '0 0 0 12px',
          fontStyle: 'normal',
        },
      },
      e
    ),
  c = ({ root: e, object: o, objectDepth: t }) =>
    r(
      'li',
      { style: { marginLeft: e ? 0 : '14px' } },
      r('object', { object: o, config: { objectDepth: t } })
    )
function a({ elements: e, colon: o, objectDepth: t, isFragment: n }) {
  return r(
    'span',
    { style: { fontStyle: t ? 'normal' : 'italic' } },
    o && t && ':',
    ' {',
    e.map((o, t) =>
      r(
        'span',
        null,
        r(
          'span',
          { style: { opacity: 0.7 } },
          n && n(o) ? r('span', null, '...') : null,
          o.toString().replace(/\(.+$/, '(â€¦)')
        ),
        t !== e.length - 1 && r('span', null, ', ')
      )
    ),
    '}'
  )
}
var i = {
  __proto__: null,
  selectionFormatter: {
    header(o, t = {}) {
      try {
        if (!(o instanceof e.Selection)) return null
        const { selections: n } = o
        return r(
          'div',
          null,
          r(s, {
            path: [o],
            objectDepth: t.objectDepth,
            isRoot: o => o.constructor === e.Selection,
            isFragment: o => o instanceof e.Fragment,
          }),
          n.size &&
            r(a, {
              elements: Array.from(n),
              objectDepth: t.objectDepth,
              isFragment: o => o instanceof e.Fragment,
            })
        )
      } catch {
        return null
      }
    },
    body(o, t = {}) {
      const n = Array.from(o.selections)
      return (
        n.sort(
          (o, t) => +(t instanceof e.Fragment) - +(o instanceof e.Fragment)
        ),
        r(
          l,
          null,
          n.map(e =>
            r(c, {
              object: e,
              root: !!e.selections.size,
              objectDepth: (t.objectDepth || 0) + 1,
            })
          )
        )
      )
    },
    hasBody: e => !!e.selections.size,
  },
  accessorFormatter: {
    header(o, t = {}) {
      try {
        if (!(o instanceof e.Accessor)) return null
        const n = t.objectDepth ? o.path.slice(t.objectDepth) : o.path,
          { children: l } = o
        return r(
          'div',
          null,
          r(s, {
            path: n,
            objectDepth: t.objectDepth,
            isRoot: o => o instanceof e.RootAccessor,
            isFragment: o => o instanceof e.FragmentAccessor,
          }),
          l.length
            ? r(a, {
                elements: l,
                objectDepth: t.objectDepth,
                colon: !(o instanceof e.FragmentAccessor),
                isFragment: o => o instanceof e.FragmentAccessor,
              })
            : (t.objectDepth || o.node instanceof e.ScalarNode) &&
                r(
                  'span',
                  null,
                  ': ',
                  r('object', { object: o.value ? o.value.toJSON() : null })
                )
        )
      } catch {
        return null
      }
    },
    body(o) {
      const t = [...o.children]
      return (
        t.sort(
          (o, t) =>
            +(t instanceof e.FragmentAccessor) -
            +(o instanceof e.FragmentAccessor)
        ),
        r(
          l,
          null,
          t.map(e =>
            r(c, {
              object: e,
              root: !!e.children.length,
              objectDepth: e.path.length - 1,
            })
          )
        )
      )
    },
    hasBody: e => !!e.children.length,
  },
  proxyFormatter: {
    header(o) {
      try {
        return o && o[e.ACCESSOR]
          ? r('object', { object: o[e.ACCESSOR] })
          : null
      } catch {
        return null
      }
    },
    hasBody: () => !1,
  },
}
'undefined' != typeof window &&
  (window.devtoolsFormatters || (window.devtoolsFormatters = []),
  window.devtoolsFormatters.push(
    ...Object.values(i).filter(e => 'object' == typeof e)
  ))
const p = (...e) => {
  const o = [],
    t = []
  for (const [n, r] of e.filter(Boolean))
    o.push(n), t.push(`font-weight: normal; ${r}`)
  return [`%c${o.join('%c')}`, ...t]
}
exports.Logger = class {
  constructor(e, o = !1) {
    ;(this.client = e),
      (this.verbose = o),
      (this.onCommit = ({
        stacks: e,
        stackQueries: o,
        queries: t,
        accessors: n,
      }) => {
        if (!this.verbose) return
        console.groupCollapsed(
          ...p(
            ['GraphQL ', 'color: gray'],
            ['fetching ', 'color: darkgrey'],
            [t.size, 'color: hsl(252, 100%, 75%)'],
            [` quer${1 === t.size ? 'y' : 'ies'}`, 'color: darkgrey']
          )
        )
        const r = {}
        n.forEach((t, n) => {
          r[t.path.toString()] = {
            Stack: `[${e[n].join(', ')}]`,
            'Chosen query': o[n].toString(),
          }
        }),
          console.table(r),
          console.groupEnd()
      }),
      (this.onFetch = async (e, o, n, r, s) => {
        const l = Date.now()
        let c = void 0,
          a = void 0
        try {
          c = await o
        } catch (e) {
          a = e
        }
        const i = Date.now() - l
        console.groupCollapsed(
          ...p(
            ['GraphQL ', 'color: gray'],
            ['query ', `color: ${a ? 'red' : '#03A9F4'}; font-weight: bold`],
            [`${s || '(unnamed)'} `, 'font-weight: bold; color: inherit'],
            [`(${i}ms)`, 'color: gray'],
            [` ${e.length} accessors`, 'color: gray'],
            a && [
              'FAILED',
              'margin-left: 10px; border-radius: 2px; padding: 2px 6px; background: #e84343; color: white',
            ]
          )
        )
        const h = 'font-weight: bold; color: #f316c1'
        console.group(
          ...p(
            ['Query ', h],
            ['  ', 'background-image: url(https://graphql.org/img/logo.svg)']
          )
        ),
          n && console.log(...p(['Variables', 'color: #25e1e1']), n),
          console.log(...p([r, 'color: gray'])),
          console.groupEnd(),
          a ? console.error(a) : console.log(...p(['Result', h]), c),
          console.groupCollapsed(...p(['Accessors', h]))
        for (const o of e) console.log(o)
        console.groupEnd(),
          console.log(
            ...p(['Cache snapshot', h]),
            t.parse(t.stringify(this.client.cache))
          ),
          console.groupEnd()
      }),
      this.client.plugins.add(this)
  }
}
//# sourceMappingURL=logger.cjs.production.min.js.map
