{"version":3,"file":"schema.cjs.development.js","sources":["../src/Codegen/File.ts","../src/Codegen/files/generated/schema.ts","../src/Codegen/files/generated/types.ts","../src/Codegen/files/generated/index.ts","../src/Codegen/files/extensions.ts","../src/Codegen/files/client.ts","../src/Codegen/files/index.ts","../src/Codegen/Codegen.ts","../src/fetchSchema/introspectionQuery.ts","../src/fetchSchema/introspectionToSchema.ts","../src/fetchSchema/fetchSchema.ts"],"sourcesContent":["export const CORE = 'gqless'\nexport const UTILS = '@gqless/utils'\n\nexport abstract class File {\n  constructor(public path: string, public overwrite: boolean = true) {}\n\n  private imports = new Map<string, Set<string>>()\n  private importAlls = new Map<string, string>()\n\n  protected import(from: string, ...imports: string[]) {\n    if (!this.imports.has(from)) this.imports.set(from, new Set())\n    const importsSet = this.imports.get(from)!\n    imports.forEach(imp => importsSet.add(imp))\n  }\n\n  protected importAll(from: string, as: string) {\n    if (this.importAlls.has(from)) {\n      const existingName = this.importAlls.get(from)\n      if (existingName !== as)\n        throw new Error(\n          `Already imported all from ${from}, use ${existingName} instead of ${as}`\n        )\n\n      return\n    }\n\n    this.importAlls.set(from, as)\n  }\n\n  public generate() {\n    return [\n      ...Array.from(this.importAlls.entries()).map(\n        ([from, as]) => `import * as ${as} from '${from}'`\n      ),\n      ...Array.from(this.imports.entries()).map(([from, imports]) =>\n        imports.size\n          ? `import { ${Array.from(imports).join(',')} } from '${from}'`\n          : ''\n      ),\n    ].join('\\n')\n  }\n}\n","import { SchemaType, Type, SchemaFieldArgs, SchemaField } from '../../../Schema'\nimport {\n  ObjectNode,\n  ArrayNode,\n  ScalarNode,\n  InputNode,\n  InputNodeField,\n  InterfaceNode,\n  UnionNode,\n  Arguments,\n  ArgumentsField,\n  FieldNode,\n  EnumNode,\n} from 'gqless'\nimport { File, UTILS, CORE } from '../../File'\nimport { Codegen } from '../../Codegen'\n\nexport const SCHEMA_VAR = 'schema'\n\nexport class SchemaFile extends File {\n  constructor(private codegen: Codegen) {\n    super('generated/schema')\n  }\n\n  public generate() {\n    this.importAll(`../extensions`, 'extensions')\n    this.import(UTILS, 'lazyGetters')\n\n    const body = `\n      export const ${SCHEMA_VAR} = ${this.generateSchema()}\n\n      lazyGetters(${SCHEMA_VAR})\n    `\n\n    return `\n      // @ts-nocheck\n      ${super.generate()}\n\n      ${body}\n    `\n  }\n\n  private generateSchema() {\n    return `{\n      ${Object.values(this.codegen.schema.types)\n        .map(\n          type => `get ${type.name}() {\n            return ${this.generateNode(type)}\n          }`\n        )\n        .join(',')}\n    }`\n  }\n\n  private getNode(name: string) {\n    return `${SCHEMA_VAR}.${name}`\n  }\n\n  private getExtension(name: string) {\n    if (this.codegen.options.typescript) {\n      return `(extensions as any || {}).${name}`\n    }\n\n    // || {} is used to confuse webpack which displays errors if you don't export an extension\n    return `(extensions || {}).${name}`\n  }\n\n  private generateFieldGetter(field: SchemaField) {\n    this.import(CORE, FieldNode.name)\n\n    return `get ${field.name}() {\n      return new ${FieldNode.name}(${this.generateType(\n      field.type\n    )}, ${this.generateArguments(field.args)}, ${field.type.nullable})\n    }`\n  }\n\n  private generateNode(type: SchemaType) {\n    switch (type.kind) {\n      case 'OBJECT': {\n        this.import(CORE, ObjectNode.name)\n\n        return `new ${ObjectNode.name}({\n          ${Object.values(type.fields)\n            .map(field => this.generateFieldGetter(field))\n            .join(',')}\n        }, { name: ${JSON.stringify(type.name)}, extension: ${this.getExtension(\n          type.name\n        )} })`\n      }\n\n      case 'INTERFACE': {\n        this.import(CORE, InterfaceNode.name)\n\n        return `new ${InterfaceNode.name}({\n          ${Object.values(type.fields)\n            .map(field => this.generateFieldGetter(field))\n            .join(',')}\n        },\n        [${type.possibleTypes.map(type => this.getNode(type)).join(',')}],\n        { name: ${JSON.stringify(type.name)}, extension: ${this.getExtension(\n          type.name\n        )} })`\n      }\n\n      case 'UNION': {\n        this.import(CORE, UnionNode.name)\n\n        return `new ${UnionNode.name}([${type.possibleTypes.map(type =>\n          this.getNode(type)\n        )}])`\n      }\n\n      case 'SCALAR': {\n        this.import(CORE, ScalarNode.name)\n\n        return `new ${ScalarNode.name}({ name: ${JSON.stringify(\n          type.name\n        )}, extension: ${this.getExtension(type.name)} })`\n      }\n\n      case 'INPUT_OBJECT': {\n        this.import(CORE, InputNode.name)\n\n        return `new ${InputNode.name}({\n          ${Object.values(type.inputFields)\n            .map(field => {\n              this.import(CORE, InputNodeField.name)\n\n              return `get ${field.name}() {\n                return new ${InputNodeField.name}(${this.generateType(\n                field.type\n              )}, ${field.type.nullable})\n              }`\n            })\n            .join(',')}\n        }, ${JSON.stringify({ name: type.name })})`\n      }\n\n      case 'ENUM': {\n        this.import(CORE, EnumNode.name)\n\n        return `new ${EnumNode.name}({ name: ${JSON.stringify(type.name)} })`\n      }\n    }\n\n    return undefined\n  }\n\n  private generateType(type: Type): string {\n    this.import(CORE, ArrayNode.name)\n\n    if (type.kind === 'LIST') {\n      return `new ${ArrayNode.name}(${this.generateType(type.ofType)}, ${\n        type.nullable\n      })`\n    }\n\n    return this.getNode(type.name)\n  }\n\n  public generateArguments(args?: SchemaFieldArgs) {\n    if (!args) return undefined\n\n    this.import(CORE, Arguments.name)\n\n    const argsRequired = !Object.values(args).find(arg => arg.nullable)\n      ? ', true'\n      : ''\n\n    return `new ${Arguments.name}({\n      ${Object.entries(args)\n        .map(([name, type]) => {\n          this.import(CORE, ArgumentsField.name)\n\n          return `get ${name}() {\n            return new ${ArgumentsField.name}(${this.generateType(type)}, ${\n            type.nullable\n          })}`\n        })\n        .join(',')}\n    }${argsRequired})`\n  }\n}\n","import { File, CORE } from '../../File'\nimport { Codegen } from '../../Codegen'\nimport {\n  SchemaType,\n  SchemaField,\n  Type,\n  SchemaInterfaceType,\n  SchemaFieldArgs,\n  SchemaEnumType,\n} from '../../../Schema'\n\nconst TYPE_PREFIX = 't_'\n\ntype TypeResolver = (name: string) => string\n\nexport class TypesFile extends File {\n  constructor(private codegen: Codegen) {\n    super('generated/types')\n  }\n\n  private createUniqueNames<TName extends string>(\n    reservedNames: string[],\n    names: TName[],\n    makeUnique: (name: string) => string\n  ) {\n    const namesObj = {} as Record<TName, string>\n\n    const uniqueName = (desiredName: string): string => {\n      if (reservedNames.includes(desiredName))\n        return uniqueName(makeUnique(desiredName))\n\n      return desiredName\n    }\n\n    for (const name of names) {\n      const chosenName = uniqueName(name)\n      reservedNames.push(chosenName)\n\n      namesObj[name] = chosenName\n    }\n\n    return namesObj\n  }\n\n  private typeNames = this.createUniqueNames(\n    Object.keys(this.codegen.schema.types),\n    Object.keys(this.codegen.schema.types),\n    name => {\n      return `${TYPE_PREFIX}${name}`\n    }\n  )\n\n  private names = this.createUniqueNames(\n    [\n      ...Object.keys(this.codegen.schema.types),\n      ...Object.values(this.typeNames),\n    ],\n    [\n      'Extension',\n      'EnumType',\n      'FieldsType',\n      'FieldsTypeArg',\n      'ScalarType',\n      'TypeData',\n      'extensions',\n    ],\n    name => `gqless_${name}`\n  )\n\n  private typeReference = (name: string): string => {\n    const schemaType = this.codegen.getSchemaType(name)\n\n    if (schemaType.kind === 'INPUT_OBJECT') return name\n\n    return this.typeNames[name]\n  }\n\n  private typeValue = (name: string) => {\n    const type = this.codegen.getSchemaType(name)\n\n    if (type.kind === 'SCALAR') {\n      return this.defaultScalarType(type)\n    }\n\n    return type.name\n  }\n\n  public generate() {\n    this.import(CORE, this.names.TypeData)\n    this.importAll('../extensions', this.names.extensions)\n\n    const body = Object.values(this.codegen.schema.types)\n      .map(type => {\n        const definition = this.generateSchemaType(type)\n        if (!definition) return\n\n        return this.generateComments(this.schemaTypeComments(type)) + definition\n      })\n      .filter(Boolean)\n      .join('\\n\\n')\n\n    return `\n      ${super.generate()}\n\n      type ${\n        this.names.Extension\n      }<TName extends string> = TName extends keyof typeof ${\n      this.names.extensions\n    }\n        ? typeof ${this.names.extensions}[TName]\n        : any\n\n      ${body}\n\n      ${Object.values(this.codegen.schema.types)\n        .filter(type => type.kind !== 'INPUT_OBJECT')\n        .map(type =>\n          type.kind === 'ENUM'\n            ? `${this.generateComments(\n                this.schemaTypeComments(type)\n              )}export enum ${type.name} { \\n\n          ${(type as SchemaEnumType).enumValues.map(k => `${k} = '${k}' \\n`)}\n          }`\n            : `${this.generateComments(\n                this.schemaTypeComments(type)\n              )}export type ${type.name} = ${\n                this.names.TypeData\n              }<${this.typeReference(type.name)}>`\n        )\n        .join('\\n')}\n    `\n  }\n\n  private schemaTypeComments(type: SchemaType) {\n    const comments: string[] = [`@name ${type.name}`, `@type ${type.kind}`]\n\n    if (type.kind === 'OBJECT' && type.interfaces.length) {\n      comments.push(`@implements ${type.interfaces.join(', ')}`)\n    }\n\n    return comments\n  }\n\n  private generateComments(comments: string[]) {\n    if (comments.length)\n      return (\n        `\\n` +\n        `/**\\n` +\n        ` * ${comments.join('\\n* ').replace(/\\*\\//gm, '*\\u200B/')}\\n` +\n        ` */\\n`\n      )\n\n    return ''\n  }\n\n  private generateFieldComments(field: SchemaField) {\n    const comments: string[] = []\n    if (field.isDeprecated) {\n      comments.push(\n        `@deprecated${\n          field.deprecationReason\n            ? ` ${field.deprecationReason.replace(/\\n/gm, ' ')}`\n            : ''\n        }`\n      )\n    }\n\n    if (field.description) {\n      comments.push(...field.description.split('\\n'))\n    }\n\n    return this.generateComments(comments)\n  }\n\n  public generateSchemaType(type: SchemaType): string | undefined {\n    switch (type.kind) {\n      case 'SCALAR':\n        return this.generateScalarType(type)\n\n      case 'UNION':\n      case 'INTERFACE':\n        return `type ${this.typeReference(\n          type.name\n        )} = ${type.possibleTypes\n          .map(name => this.typeReference(name))\n          .join(' | ')}`\n\n      case 'OBJECT': {\n        this.import(CORE, this.names.FieldsType)\n\n        return `type ${this.typeReference(type.name)} = ${\n          this.names.FieldsType\n        }<{\\n${[\n          `__typename: ${this.typeReference('String')}<'${type.name}'>`,\n          ...Object.values(type.fields).map(field => this.generateField(field)),\n        ].join('\\n')}\\n}, ${this.names.Extension}<'${type.name}'>>`\n      }\n\n      case 'INPUT_OBJECT':\n        return `export type ${this.typeReference(type.name)} = {${Object.values(\n          type.inputFields\n        )\n          .map(field => this.generateField(field, this.typeValue))\n          .join('\\n')}}`\n\n      case 'ENUM': {\n        this.import(CORE, this.names.EnumType)\n\n        return `type ${this.typeReference(type.name)} = ${\n          this.names.EnumType\n        }<${type.enumValues.map(value => `'${value}'`).join(' | ')}>`\n      }\n\n      default:\n        return\n    }\n  }\n\n  public generateArgs(args: SchemaFieldArgs) {\n    return `{${Object.entries(args)\n      .map(([name, type]) => {\n        const NULLABLE = type.nullable ? '?' : ''\n\n        return `${name}${NULLABLE}: ${this.generateType(type, this.typeValue)}`\n      })\n      .join(',')}}`\n  }\n\n  public generateField(field: SchemaField, resolveType?: TypeResolver) {\n    const NULLABLE = field.type.nullable ? '?' : ''\n    const fieldType = this.generateType(field.type, resolveType)\n\n    if (field.args) this.import(CORE, this.names.FieldsTypeArg)\n\n    return `${this.generateFieldComments(field)}${field.name} ${\n      field.args\n        ? `: ${this.names.FieldsTypeArg}<${this.generateArgs(\n            field.args\n          )}, ${fieldType}>`\n        : `${NULLABLE}: ${fieldType}`\n    }`\n  }\n\n  public generateType(type: Type, resolveType = this.typeReference): string {\n    const nullType = type.nullable ? '| null' : ''\n\n    switch (type.kind) {\n      case 'OBJECT':\n      case 'ENUM':\n      case 'INPUT_OBJECT':\n      case 'UNION':\n      case 'INTERFACE':\n      case 'SCALAR':\n        return `${resolveType(type.name)}${nullType}`\n\n      case 'LIST':\n        return `(${this.generateType(type.ofType, resolveType)})[]${nullType}`\n\n      default:\n        return 'any'\n    }\n  }\n\n  public defaultScalarType(scalar: SchemaType) {\n    switch (scalar.name) {\n      case 'ID':\n      case 'String':\n      case 'Date':\n      case 'URI':\n        return `string`\n\n      case 'Int':\n      case 'Float':\n        return `number`\n\n      case 'Boolean':\n        return `boolean`\n\n      case 'JSON':\n        return `{ [K: string]: any }`\n    }\n    return 'any'\n  }\n\n  public generateScalarType(scalar: SchemaType) {\n    this.import(CORE, this.names.ScalarType)\n\n    const type = this.defaultScalarType(scalar)\n\n    return `type ${this.typeReference(\n      scalar.name\n    )}<T extends ${type} = ${type}> = ${this.names.ScalarType}<T, ${\n      this.names.Extension\n    }<'${scalar.name}'>>`\n  }\n}\n","import { File } from '../../File'\n\nexport class IndexFile extends File {\n  constructor() {\n    super('generated/index')\n  }\n\n  public generate() {\n    return `\n      ${super.generate()}\n\n      export * from './schema'\n      export * from './types'\n    `\n  }\n}\n\nexport * from './schema'\nexport * from './types'\n","import { File } from '../File'\nimport { Codegen } from '../Codegen'\n\nexport class ExtensionsFile extends File {\n  constructor(private codegen: Codegen) {\n    super('extensions/index', false)\n  }\n\n  public generate() {\n    // TODO: default keys\n\n    return `\n      ${super.generate()}\n\n      export const Query = {}\n\n      /**\n       * Add a key to a type\n       */\n      // export const User = {\n      //   [GET_KEY]: (user) => user.id\n      // }\n\n      /**\n       * Add custom data to a type\n       * @example\n       * query.users[0].follow()\n       */\n      // export const User = (user) => ({\n      //   follow() {\n      //     console.log('follow', user.id)\n      //   }\n      // })\n    `\n  }\n}\n","import { File, CORE } from '../File'\nimport { Codegen } from '../Codegen'\n\nexport class ClientFile extends File {\n  constructor(private codegen: Codegen) {\n    super('client', false)\n  }\n\n  public generate() {\n    this.import(CORE, 'Client', 'QueryFetcher')\n    this.import('./generated', 'schema', this.codegen.schema.queryType)\n\n    return `\n      ${super.generate()}\n\n      const endpoint = ${JSON.stringify(this.codegen.options.url || '')}\n\n      const fetchQuery: QueryFetcher = async (query, variables) => {\n        const response = await fetch(endpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',${\n              this.codegen.options.headers ? Object.entries(this.codegen.options.headers).map(\n                ([key, value]) => `'${key}': '${value}'`\n              ).join('\\n') : ''\n            }\n          },\n          body: JSON.stringify({\n            query,\n            variables,\n          }),\n          mode: 'cors',\n        })\n\n        if (!response.ok) {\n          throw new Error(\\`Network error, received status code $\\{response.status}\\`)\n        }\n\n        const json = await response.json()\n\n        return json\n      }\n\n      export const client = new Client<${\n        this.codegen.schema.queryType\n      }>(schema.${this.codegen.schema.queryType}, fetchQuery)\n\n      export const query = client.query\n    `\n  }\n}\n","import * as generated from './generated'\nimport { File } from '../File'\n\nexport class IndexFile extends File {\n  constructor() {\n    super('index')\n  }\n\n  public generate() {\n    return `\n      ${super.generate()}\n\n      export * from './generated'\n      export * from './client'\n    `\n  }\n}\n\nexport * from './extensions'\nexport * from './client'\n\nexport { generated }\n","import { Schema } from '../Schema'\nimport * as graphql from './files'\nimport { File } from './File'\n\ninterface CodegenOptions {\n  url?: string\n  typescript?: boolean\n  headers?: Record<string, string>\n}\n\nexport class Codegen {\n  public options: CodegenOptions\n  public files: File[]\n\n  constructor(public schema: Schema, options?: CodegenOptions) {\n    this.options = {\n      typescript: true,\n      ...options,\n    }\n\n    this.files = [\n      new graphql.ExtensionsFile(this),\n      new graphql.IndexFile(),\n\n      new graphql.generated.SchemaFile(this),\n      new graphql.ClientFile(this),\n      new graphql.generated.TypesFile(this),\n      new graphql.generated.IndexFile(),\n    ]\n  }\n\n  public getSchemaType(name: string) {\n    return this.schema.types[name]\n  }\n\n  public generate() {\n    return this.files.map(file => ({\n      path: `${file.path}.${this.options.typescript ? 'ts' : 'js'}`,\n      overwrite: file.overwrite,\n      contents: file.generate(),\n    }))\n  }\n}\n","const gql = String.raw\n\nexport const introspectionQuery = (includeInfo = false) => gql`\n  query IntrospectionQuery {\n    __schema {\n      queryType {\n        name\n      }\n      mutationType {\n        name\n      }\n      types {\n        ...FullType\n      }\n    }\n  }\n\n  fragment FullType on __Type {\n    kind\n    name\n    fields(includeDeprecated: true) {\n      ${\n        includeInfo\n          ? `\n      description\n      isDeprecated\n      deprecationReason\n      `\n          : ''\n      }\n      name\n      args {\n        type {\n          ...TypeRef\n        }\n        ...InputValue\n      }\n      type {\n        ...TypeRef\n      }\n    }\n    enumValues {\n      name\n    }\n    inputFields {\n      type {\n        ...TypeRef\n      }\n      ...InputValue\n    }\n    interfaces {\n      ...TypeRef\n    }\n    possibleTypes {\n      ...TypeRef\n    }\n  }\n\n  fragment InputValue on __InputValue {\n    name\n  }\n\n  fragment TypeRef on __Type {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import {\n  Schema,\n  Type,\n  SchemaFields,\n  SchemaInputFields,\n  SchemaFieldArgs,\n} from '../Schema'\n\nconst getType = (type: any, nullable = true): Type | null => {\n  if (!type) return null\n  if (type.kind === 'NON_NULL') return getType(type.ofType, false)\n\n  return {\n    kind: type.kind,\n    nullable,\n    ...(type.kind === 'LIST'\n      ? { ofType: getType(type.ofType)! }\n      : { name: type.name }),\n  }\n}\n\nconst getFields = (introspectionFields: any) => {\n  const fields: SchemaFields = {}\n\n  for (const field of introspectionFields) {\n    let args: SchemaFieldArgs | undefined = undefined\n    if (field.args.length) {\n      args = {}\n      field.args.forEach((arg: any) => {\n        args![arg.name as string] = getType(arg.type)!\n      })\n    }\n\n    fields[field.name] = {\n      name: field.name,\n      deprecationReason: field.deprecationReason,\n      description: field.description,\n      isDeprecated: field.isDeprecated,\n      args,\n      type: getType(field.type)!,\n    }\n  }\n\n  return fields\n}\n\nconst getInputObjectFields = (introspectionFields: any) => {\n  const fields: SchemaInputFields = {}\n\n  for (const field of introspectionFields) {\n    fields[field.name] = {\n      name: field.name,\n      type: getType(field.type)!,\n    }\n  }\n\n  return fields\n}\n\nconst getInterfaces = (interfaces: any) =>\n  interfaces.map((_interface: any) => _interface.name)\n\nconst getEnumValues = (enumValues: any) =>\n  enumValues.map((enumValues: any) => enumValues.name)\n\nexport const introspectionToSchema = (introspection: any) => {\n  const schema: Schema = {\n    queryType: introspection.queryType.name,\n    mutationType: introspection.mutationType && introspection.mutationType.name,\n    types: {},\n  }\n\n  for (const type of introspection.types) {\n    schema.types[type.name] = {\n      name: type.name,\n      kind: type.kind,\n      ...(type.kind === 'UNION'\n        ? { possibleTypes: type.possibleTypes.map(({ name }: any) => name) }\n        : type.kind === 'INTERFACE'\n        ? {\n            possibleTypes: type.possibleTypes.map(({ name }: any) => name),\n            fields: getFields(type.fields),\n          }\n        : type.kind === 'OBJECT'\n        ? {\n            fields: getFields(type.fields),\n            interfaces: getInterfaces(type.interfaces),\n          }\n        : type.kind === 'INPUT_OBJECT'\n        ? {\n            inputFields: getInputObjectFields(type.inputFields),\n          }\n        : type.kind === 'ENUM'\n        ? { enumValues: getEnumValues(type.enumValues) }\n        : null),\n    }\n  }\n\n  return schema\n}\n","import { introspectionQuery } from './introspectionQuery'\nimport { introspectionToSchema } from './introspectionToSchema'\nimport { QueryFetcher } from 'gqless'\n\nexport type IFetchSchemaOptions = {\n  includeInfo?: boolean\n}\n\nexport const fetchSchema = async (\n  fetchQuery: QueryFetcher,\n  { includeInfo }: IFetchSchemaOptions = {}\n) => {\n  const { data } = await fetchQuery(introspectionQuery(includeInfo))\n\n  return introspectionToSchema(data.__schema)\n}\n"],"names":["CORE","UTILS","File","constructor","path","overwrite","Map","import","from","imports","has","set","Set","importsSet","get","forEach","imp","add","importAll","as","importAlls","existingName","Error","generate","Array","entries","map","size","join","SCHEMA_VAR","SchemaFile","codegen","body","generateSchema","Object","values","schema","types","type","name","generateNode","getNode","getExtension","options","typescript","generateFieldGetter","field","FieldNode","generateType","generateArguments","args","nullable","kind","ObjectNode","fields","JSON","stringify","InterfaceNode","possibleTypes","UnionNode","ScalarNode","InputNode","inputFields","InputNodeField","EnumNode","undefined","ArrayNode","ofType","Arguments","argsRequired","find","arg","ArgumentsField","TYPE_PREFIX","TypesFile","createUniqueNames","keys","typeNames","schemaType","getSchemaType","defaultScalarType","reservedNames","names","makeUnique","namesObj","uniqueName","desiredName","includes","chosenName","push","TypeData","extensions","definition","generateSchemaType","generateComments","schemaTypeComments","filter","Boolean","Extension","enumValues","k","typeReference","comments","interfaces","length","replace","generateFieldComments","isDeprecated","deprecationReason","description","split","generateScalarType","FieldsType","generateField","typeValue","EnumType","value","generateArgs","NULLABLE","resolveType","fieldType","FieldsTypeArg","nullType","scalar","ScalarType","IndexFile","ExtensionsFile","ClientFile","queryType","url","headers","key","Codegen","files","graphql","file","contents","gql","String","raw","introspectionQuery","includeInfo","getType","getFields","introspectionFields","getInputObjectFields","getInterfaces","_interface","getEnumValues","introspectionToSchema","introspection","mutationType","fetchSchema","fetchQuery","data","__schema"],"mappings":"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"}